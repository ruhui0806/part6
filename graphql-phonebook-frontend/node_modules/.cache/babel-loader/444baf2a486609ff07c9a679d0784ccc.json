{"ast":null,"code":"import \"../../utilities/globals/index.js\";\nimport { useState, useRef, useEffect } from 'react';\nimport { invariant } from \"../../utilities/globals/index.js\";\nimport { equal } from '@wry/equality';\nimport { DocumentType, verifyDocumentType } from \"../parser/index.js\";\nimport { useApolloClient } from \"./useApolloClient.js\";\nexport function useSubscription(subscription, options) {\n  var hasIssuedDeprecationWarningRef = useRef(false);\n  var client = useApolloClient(options === null || options === void 0 ? void 0 : options.client);\n  verifyDocumentType(subscription, DocumentType.Subscription);\n\n  var _a = useState({\n    loading: !(options === null || options === void 0 ? void 0 : options.skip),\n    error: void 0,\n    data: void 0,\n    variables: options === null || options === void 0 ? void 0 : options.variables\n  }),\n      result = _a[0],\n      setResult = _a[1];\n\n  if (!hasIssuedDeprecationWarningRef.current) {\n    hasIssuedDeprecationWarningRef.current = true;\n\n    if (options === null || options === void 0 ? void 0 : options.onSubscriptionData) {\n      __DEV__ && invariant.warn(options.onData ? \"'useSubscription' supports only the 'onSubscriptionData' or 'onData' option, but not both. Only the 'onData' option will be used.\" : \"'onSubscriptionData' is deprecated and will be removed in a future major version. Please use the 'onData' option instead.\");\n    }\n\n    if (options === null || options === void 0 ? void 0 : options.onSubscriptionComplete) {\n      __DEV__ && invariant.warn(options.onComplete ? \"'useSubscription' supports only the 'onSubscriptionComplete' or 'onComplete' option, but not both. Only the 'onComplete' option will be used.\" : \"'onSubscriptionComplete' is deprecated and will be removed in a future major version. Please use the 'onComplete' option instead.\");\n    }\n  }\n\n  var _b = useState(function () {\n    if (options === null || options === void 0 ? void 0 : options.skip) {\n      return null;\n    }\n\n    return client.subscribe({\n      query: subscription,\n      variables: options === null || options === void 0 ? void 0 : options.variables,\n      fetchPolicy: options === null || options === void 0 ? void 0 : options.fetchPolicy,\n      context: options === null || options === void 0 ? void 0 : options.context\n    });\n  }),\n      observable = _b[0],\n      setObservable = _b[1];\n\n  var canResetObservableRef = useRef(false);\n  useEffect(function () {\n    return function () {\n      canResetObservableRef.current = true;\n    };\n  }, []);\n  var ref = useRef({\n    client: client,\n    subscription: subscription,\n    options: options\n  });\n  useEffect(function () {\n    var _a, _b, _c, _d;\n\n    var shouldResubscribe = options === null || options === void 0 ? void 0 : options.shouldResubscribe;\n\n    if (typeof shouldResubscribe === 'function') {\n      shouldResubscribe = !!shouldResubscribe(options);\n    }\n\n    if (options === null || options === void 0 ? void 0 : options.skip) {\n      if (!(options === null || options === void 0 ? void 0 : options.skip) !== !((_a = ref.current.options) === null || _a === void 0 ? void 0 : _a.skip) || canResetObservableRef.current) {\n        setResult({\n          loading: false,\n          data: void 0,\n          error: void 0,\n          variables: options === null || options === void 0 ? void 0 : options.variables\n        });\n        setObservable(null);\n        canResetObservableRef.current = false;\n      }\n    } else if (shouldResubscribe !== false && (client !== ref.current.client || subscription !== ref.current.subscription || (options === null || options === void 0 ? void 0 : options.fetchPolicy) !== ((_b = ref.current.options) === null || _b === void 0 ? void 0 : _b.fetchPolicy) || !(options === null || options === void 0 ? void 0 : options.skip) !== !((_c = ref.current.options) === null || _c === void 0 ? void 0 : _c.skip) || !equal(options === null || options === void 0 ? void 0 : options.variables, (_d = ref.current.options) === null || _d === void 0 ? void 0 : _d.variables)) || canResetObservableRef.current) {\n      setResult({\n        loading: true,\n        data: void 0,\n        error: void 0,\n        variables: options === null || options === void 0 ? void 0 : options.variables\n      });\n      setObservable(client.subscribe({\n        query: subscription,\n        variables: options === null || options === void 0 ? void 0 : options.variables,\n        fetchPolicy: options === null || options === void 0 ? void 0 : options.fetchPolicy,\n        context: options === null || options === void 0 ? void 0 : options.context\n      }));\n      canResetObservableRef.current = false;\n    }\n\n    Object.assign(ref.current, {\n      client: client,\n      subscription: subscription,\n      options: options\n    });\n  }, [client, subscription, options, canResetObservableRef.current]);\n  useEffect(function () {\n    if (!observable) {\n      return;\n    }\n\n    var subscription = observable.subscribe({\n      next: function (fetchResult) {\n        var _a, _b;\n\n        var result = {\n          loading: false,\n          data: fetchResult.data,\n          error: void 0,\n          variables: options === null || options === void 0 ? void 0 : options.variables\n        };\n        setResult(result);\n\n        if ((_a = ref.current.options) === null || _a === void 0 ? void 0 : _a.onData) {\n          ref.current.options.onData({\n            client: client,\n            data: result\n          });\n        } else if ((_b = ref.current.options) === null || _b === void 0 ? void 0 : _b.onSubscriptionData) {\n          ref.current.options.onSubscriptionData({\n            client: client,\n            subscriptionData: result\n          });\n        }\n      },\n      error: function (error) {\n        var _a, _b;\n\n        setResult({\n          loading: false,\n          data: void 0,\n          error: error,\n          variables: options === null || options === void 0 ? void 0 : options.variables\n        });\n        (_b = (_a = ref.current.options) === null || _a === void 0 ? void 0 : _a.onError) === null || _b === void 0 ? void 0 : _b.call(_a, error);\n      },\n      complete: function () {\n        var _a, _b;\n\n        if ((_a = ref.current.options) === null || _a === void 0 ? void 0 : _a.onComplete) {\n          ref.current.options.onComplete();\n        } else if ((_b = ref.current.options) === null || _b === void 0 ? void 0 : _b.onSubscriptionComplete) {\n          ref.current.options.onSubscriptionComplete();\n        }\n      }\n    });\n    return function () {\n      subscription.unsubscribe();\n    };\n  }, [observable]);\n  return result;\n}","map":{"version":3,"mappings":"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","names":["useState","useRef","useEffect","invariant","equal","DocumentType","verifyDocumentType","useApolloClient","useSubscription","subscription","options","hasIssuedDeprecationWarningRef","client","Subscription","loading","skip","error","data","variables","result","setResult","current","onSubscriptionData","__DEV__","onSubscriptionComplete","subscribe","query","fetchPolicy","context","observable","setObservable","canResetObservableRef","ref","shouldResubscribe","_a","_b","_c","_d","Object","assign","next","fetchResult","onData","subscriptionData","onError","complete","onComplete","unsubscribe"],"sources":["/Users/kulta/Code/part6/graphql-phonebook-frontend/node_modules/@apollo/src/react/hooks/useSubscription.ts"],"sourcesContent":["import '../../utilities/globals';\nimport { useState, useRef, useEffect } from 'react';\nimport { DocumentNode } from 'graphql';\nimport { TypedDocumentNode } from '@graphql-typed-document-node/core';\nimport { invariant } from '../../utilities/globals'\nimport { equal } from '@wry/equality';\n\nimport { DocumentType, verifyDocumentType } from '../parser';\nimport {\n  SubscriptionHookOptions,\n  SubscriptionResult\n} from '../types/types';\nimport { OperationVariables } from '../../core';\nimport { useApolloClient } from './useApolloClient';\n\nexport function useSubscription<TData = any, TVariables = OperationVariables>(\n  subscription: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options?: SubscriptionHookOptions<TData, TVariables>,\n) {\n  const hasIssuedDeprecationWarningRef = useRef(false);\n  const client = useApolloClient(options?.client);\n  verifyDocumentType(subscription, DocumentType.Subscription);\n  const [result, setResult] = useState<SubscriptionResult<TData>>({\n    loading: !options?.skip,\n    error: void 0,\n    data: void 0,\n    variables: options?.variables,\n  });\n\n  if (!hasIssuedDeprecationWarningRef.current) {\n    hasIssuedDeprecationWarningRef.current = true;\n\n    if (options?.onSubscriptionData) {\n      invariant.warn(\n        options.onData\n          ? \"'useSubscription' supports only the 'onSubscriptionData' or 'onData' option, but not both. Only the 'onData' option will be used.\"\n          : \"'onSubscriptionData' is deprecated and will be removed in a future major version. Please use the 'onData' option instead.\"\n      );\n    }\n\n    if (options?.onSubscriptionComplete) {\n      invariant.warn(\n        options.onComplete\n          ? \"'useSubscription' supports only the 'onSubscriptionComplete' or 'onComplete' option, but not both. Only the 'onComplete' option will be used.\"\n          : \"'onSubscriptionComplete' is deprecated and will be removed in a future major version. Please use the 'onComplete' option instead.\"\n      );\n    }\n  }\n\n  const [observable, setObservable] = useState(() => {\n    if (options?.skip) {\n      return null;\n    }\n\n    return client.subscribe({\n      query: subscription,\n      variables: options?.variables,\n      fetchPolicy: options?.fetchPolicy,\n      context: options?.context,\n    });\n  });\n\n  const canResetObservableRef = useRef(false);\n  useEffect(() => {\n    return () => {\n      canResetObservableRef.current = true;\n    };\n  }, []);\n\n  const ref = useRef({ client, subscription, options });\n  useEffect(() => {\n    let shouldResubscribe = options?.shouldResubscribe;\n    if (typeof shouldResubscribe === 'function') {\n      shouldResubscribe = !!shouldResubscribe(options!);\n    }\n\n    if (options?.skip) {\n      if (!options?.skip !== !ref.current.options?.skip || canResetObservableRef.current) {\n        setResult({\n          loading: false,\n          data: void 0,\n          error: void 0,\n          variables: options?.variables,\n        });\n        setObservable(null);\n        canResetObservableRef.current = false;\n      }\n    } else if (\n      (shouldResubscribe !== false &&\n        (client !== ref.current.client ||\n          subscription !== ref.current.subscription ||\n          options?.fetchPolicy !== ref.current.options?.fetchPolicy ||\n          !options?.skip !== !ref.current.options?.skip ||\n          !equal(options?.variables, ref.current.options?.variables))) ||\n      canResetObservableRef.current\n    ) {\n      setResult({\n        loading: true,\n        data: void 0,\n        error: void 0,\n        variables: options?.variables,\n      });\n      setObservable(client.subscribe({\n        query: subscription,\n        variables: options?.variables,\n        fetchPolicy: options?.fetchPolicy,\n        context: options?.context,\n      }));\n      canResetObservableRef.current = false;\n    }\n\n    Object.assign(ref.current, { client, subscription, options });\n  }, [client, subscription, options, canResetObservableRef.current]);\n\n  useEffect(() => {\n    if (!observable) {\n      return;\n    }\n\n    const subscription = observable.subscribe({\n      next(fetchResult) {\n        const result = {\n          loading: false,\n          // TODO: fetchResult.data can be null but SubscriptionResult.data\n          // expects TData | undefined only\n          data: fetchResult.data!,\n          error: void 0,\n          variables: options?.variables,\n        };\n        setResult(result);\n\n        if (ref.current.options?.onData) {\n          ref.current.options.onData({\n            client,\n            data: result\n          });\n        } else if (ref.current.options?.onSubscriptionData) {\n          ref.current.options.onSubscriptionData({\n            client,\n            subscriptionData: result\n          });\n        }\n      },\n      error(error) {\n        setResult({\n          loading: false,\n          data: void 0,\n          error,\n          variables: options?.variables,\n        });\n        ref.current.options?.onError?.(error);\n      },\n      complete() {\n        if (ref.current.options?.onComplete) {\n          ref.current.options.onComplete();\n        } else if (ref.current.options?.onSubscriptionComplete) {\n          ref.current.options.onSubscriptionComplete();\n        }\n      },\n    });\n\n    return () => {\n      subscription.unsubscribe();\n    };\n  }, [observable]);\n\n  return result;\n}\n"]},"metadata":{},"sourceType":"module"}