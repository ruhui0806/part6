{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { useCallback, useMemo, useRef } from 'react';\nimport { mergeOptions } from \"../../utilities/index.js\";\nimport { useInternalState } from \"./useQuery.js\";\nimport { useApolloClient } from \"./useApolloClient.js\";\nvar EAGER_METHODS = ['refetch', 'reobserve', 'fetchMore', 'updateQuery', 'startPolling', 'subscribeToMore'];\nexport function useLazyQuery(query, options) {\n  var internalState = useInternalState(useApolloClient(options && options.client), query);\n  var execOptionsRef = useRef();\n  var merged = execOptionsRef.current ? mergeOptions(options, execOptionsRef.current) : options;\n  var useQueryResult = internalState.useQuery(__assign(__assign({}, merged), {\n    skip: !execOptionsRef.current\n  }));\n  var initialFetchPolicy = useQueryResult.observable.options.initialFetchPolicy || internalState.getDefaultFetchPolicy();\n  var result = Object.assign(useQueryResult, {\n    called: !!execOptionsRef.current\n  });\n  var eagerMethods = useMemo(function () {\n    var eagerMethods = {};\n\n    var _loop_1 = function (key) {\n      var method = result[key];\n\n      eagerMethods[key] = function () {\n        if (!execOptionsRef.current) {\n          execOptionsRef.current = Object.create(null);\n          internalState.forceUpdate();\n        }\n\n        return method.apply(this, arguments);\n      };\n    };\n\n    for (var _i = 0, EAGER_METHODS_1 = EAGER_METHODS; _i < EAGER_METHODS_1.length; _i++) {\n      var key = EAGER_METHODS_1[_i];\n\n      _loop_1(key);\n    }\n\n    return eagerMethods;\n  }, []);\n  Object.assign(result, eagerMethods);\n  var execute = useCallback(function (executeOptions) {\n    execOptionsRef.current = executeOptions ? __assign(__assign({}, executeOptions), {\n      fetchPolicy: executeOptions.fetchPolicy || initialFetchPolicy\n    }) : {\n      fetchPolicy: initialFetchPolicy\n    };\n    var promise = internalState.asyncUpdate().then(function (queryResult) {\n      return Object.assign(queryResult, eagerMethods);\n    });\n    promise.catch(function () {});\n    return promise;\n  }, []);\n  return [execute, result];\n}","map":{"version":3,"mappings":";AAEA,SAASA,WAAT,EAAsBC,OAAtB,EAA+BC,MAA/B,QAA6C,OAA7C;AAGA,SAASC,YAAT,QAA6B,0BAA7B;AAMA,SAASC,gBAAT,QAAiC,eAAjC;AACA,SAASC,eAAT,QAAgC,sBAAhC;AAIA,IAAMC,aAAa,GAAG,CACpB,SADoB,EAEpB,WAFoB,EAGpB,WAHoB,EAIpB,aAJoB,EAKpB,cALoB,EAMpB,iBANoB,CAAtB;AASA,OAAM,SAAUC,YAAV,CACJC,KADI,EAEJC,OAFI,EAE6C;AAEjD,MAAMC,aAAa,GAAGN,gBAAgB,CACpCC,eAAe,CAACI,OAAO,IAAIA,OAAO,CAACE,MAApB,CADqB,EAEpCH,KAFoC,CAAtC;AAKA,MAAMI,cAAc,GAAGV,MAAM,EAA7B;AACA,MAAMW,MAAM,GAAGD,cAAc,CAACE,OAAf,GACXX,YAAY,CAACM,OAAD,EAAUG,cAAc,CAACE,OAAzB,CADD,GAEXL,OAFJ;AAIA,MAAMM,cAAc,GAAGL,aAAa,CAACM,QAAd,CAAsBC,sBACxCJ,MADwC,GAClC;AACTK,QAAI,EAAE,CAACN,cAAc,CAACE;AADb,GADkC,CAAtB,CAAvB;AAKA,MAAMK,kBAAkB,GACtBJ,cAAc,CAACK,UAAf,CAA0BX,OAA1B,CAAkCU,kBAAlC,IACAT,aAAa,CAACW,qBAAd,EAFF;AAIA,MAAMC,MAAM,GACVC,MAAM,CAACC,MAAP,CAAcT,cAAd,EAA8B;AAC5BU,UAAM,EAAE,CAAC,CAACb,cAAc,CAACE;AADG,GAA9B,CADF;AAMA,MAAMY,YAAY,GAAGzB,OAAO,CAAC;AAC3B,QAAMyB,YAAY,GAAwB,EAA1C;;4BACWC,KAAG;AACZ,UAAMC,MAAM,GAAGN,MAAM,CAACK,GAAD,CAArB;;AACAD,kBAAY,CAACC,GAAD,CAAZ,GAAoB;AAClB,YAAI,CAACf,cAAc,CAACE,OAApB,EAA6B;AAC3BF,wBAAc,CAACE,OAAf,GAAyBS,MAAM,CAACM,MAAP,CAAc,IAAd,CAAzB;AAEAnB,uBAAa,CAACoB,WAAd;AACD;;AACD,eAAOF,MAAM,CAACG,KAAP,CAAa,IAAb,EAAmBC,SAAnB,CAAP;AACD,OAPD;;;AAFF,SAAkB,2CAAlB,EAAkBC,2BAAlB,EAAkBA,IAAlB,EAA+B;AAA1B,UAAMN,GAAG,sBAAT;;cAAMA;AAUV;;AAED,WAAOD,YAAP;AACD,GAf2B,EAezB,EAfyB,CAA5B;AAiBAH,QAAM,CAACC,MAAP,CAAcF,MAAd,EAAsBI,YAAtB;AAEA,MAAMQ,OAAO,GAAGlC,WAAW,CAEzB,0BAAc;AACdY,kBAAc,CAACE,OAAf,GAAyBqB,cAAc,GAAElB,sBACpCkB,cADoC,GACtB;AACjBC,iBAAW,EAAED,cAAc,CAACC,WAAf,IAA8BjB;AAD1B,KADsB,CAAF,GAGnC;AACFiB,iBAAW,EAAEjB;AADX,KAHJ;AAOA,QAAMkB,OAAO,GAAG3B,aAAa,CAC1B4B,WADa,GAEbC,IAFa,CAER,uBAAW;AAAI,mBAAM,CAACf,MAAP,CAAcgB,WAAd,EAA2Bd,YAA3B;AAAwC,KAF/C,CAAhB;AAMAW,WAAO,CAACI,KAAR,CAAc,aAAQ,CAAtB;AAEA,WAAOJ,OAAP;AACD,GAnB0B,EAmBxB,EAnBwB,CAA3B;AAqBA,SAAO,CAACH,OAAD,EAAUZ,MAAV,CAAP;AACD","names":["useCallback","useMemo","useRef","mergeOptions","useInternalState","useApolloClient","EAGER_METHODS","useLazyQuery","query","options","internalState","client","execOptionsRef","merged","current","useQueryResult","useQuery","__assign","skip","initialFetchPolicy","observable","getDefaultFetchPolicy","result","Object","assign","called","eagerMethods","key","method","create","forceUpdate","apply","arguments","_i","execute","executeOptions","fetchPolicy","promise","asyncUpdate","then","queryResult","catch"],"sources":["/Users/kulta/Code/part6/graphql-phonebook-frontend/node_modules/@apollo/src/react/hooks/useLazyQuery.ts"],"sourcesContent":["import { DocumentNode } from 'graphql';\nimport { TypedDocumentNode } from '@graphql-typed-document-node/core';\nimport { useCallback, useMemo, useRef } from 'react';\n\nimport { OperationVariables } from '../../core';\nimport { mergeOptions } from '../../utilities';\nimport {\n  LazyQueryHookOptions,\n  LazyQueryResultTuple,\n  QueryResult,\n} from '../types/types';\nimport { useInternalState } from './useQuery';\nimport { useApolloClient } from './useApolloClient';\n\n// The following methods, when called will execute the query, regardless of\n// whether the useLazyQuery execute function was called before.\nconst EAGER_METHODS = [\n  'refetch',\n  'reobserve',\n  'fetchMore',\n  'updateQuery',\n  'startPolling',\n  'subscribeToMore',\n] as const;\n\nexport function useLazyQuery<TData = any, TVariables = OperationVariables>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options?: LazyQueryHookOptions<TData, TVariables>\n): LazyQueryResultTuple<TData, TVariables> {\n  const internalState = useInternalState(\n    useApolloClient(options && options.client),\n    query,\n  );\n\n  const execOptionsRef = useRef<Partial<LazyQueryHookOptions<TData, TVariables>>>();\n  const merged = execOptionsRef.current\n    ? mergeOptions(options, execOptionsRef.current)\n    : options;\n\n  const useQueryResult = internalState.useQuery({\n    ...merged,\n    skip: !execOptionsRef.current,\n  });\n\n  const initialFetchPolicy =\n    useQueryResult.observable.options.initialFetchPolicy ||\n    internalState.getDefaultFetchPolicy();\n\n  const result: QueryResult<TData, TVariables> =\n    Object.assign(useQueryResult, {\n      called: !!execOptionsRef.current,\n    });\n\n  // We use useMemo here to make sure the eager methods have a stable identity.\n  const eagerMethods = useMemo(() => {\n    const eagerMethods: Record<string, any> = {};\n    for (const key of EAGER_METHODS) {\n      const method = result[key];\n      eagerMethods[key] = function () {\n        if (!execOptionsRef.current) {\n          execOptionsRef.current = Object.create(null);\n          // Only the first time populating execOptionsRef.current matters here.\n          internalState.forceUpdate();\n        }\n        return method.apply(this, arguments);\n      };\n    }\n\n    return eagerMethods;\n  }, []);\n\n  Object.assign(result, eagerMethods);\n\n  const execute = useCallback<\n    LazyQueryResultTuple<TData, TVariables>[0]\n  >(executeOptions => {\n    execOptionsRef.current = executeOptions ? {\n      ...executeOptions,\n      fetchPolicy: executeOptions.fetchPolicy || initialFetchPolicy,\n    } : {\n      fetchPolicy: initialFetchPolicy,\n    };\n\n    const promise = internalState\n      .asyncUpdate() // Like internalState.forceUpdate, but returns a Promise.\n      .then(queryResult => Object.assign(queryResult, eagerMethods));\n\n    // Because the return value of `useLazyQuery` is usually floated, we need\n    // to catch the promise to prevent unhandled rejections.\n    promise.catch(() => {});\n\n    return promise;\n  }, []);\n\n  return [execute, result];\n}\n"]},"metadata":{},"sourceType":"module"}