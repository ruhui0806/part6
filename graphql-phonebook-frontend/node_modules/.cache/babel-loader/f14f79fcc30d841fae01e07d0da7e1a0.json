{"ast":null,"code":"var _jsxFileName = \"/Users/kulta/Code/part6/graphql-phonebook-frontend/src/components/Persons.js\";\nimport React from 'react';\nimport { gql, useQuery } from '@apollo/client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst FIND_PERSON = gql`\n  query findPersonByName($nameToSearch: String!) {\n    findPerson(name: $nameToSearch) {\n          id\n          name\n          phone\n          address{\n            street\n            city\n          }\n  }`;\n\nconst Person = _ref => {\n  let {\n    person\n  } = _ref;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: person.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\n_c = Person;\n\nconst Persons = _ref2 => {\n  let {\n    persons\n  } = _ref2;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: persons.map(p => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [' ', p.name, \" \", p.phone]\n    }, p.name, true, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 17\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 9\n  }, this);\n};\n\n_c2 = Persons;\nexport default Persons;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Person\");\n$RefreshReg$(_c2, \"Persons\");","map":{"version":3,"sources":["/Users/kulta/Code/part6/graphql-phonebook-frontend/src/components/Persons.js"],"names":["React","gql","useQuery","FIND_PERSON","Person","person","name","Persons","persons","map","p","phone"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,GAAT,EAAcC,QAAd,QAA8B,gBAA9B;;;AAEA,MAAMC,WAAW,GAAGF,GAAI;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAVA;;AAYA,MAAMG,MAAM,GAAG,QAAgB;AAAA,MAAf;AAAEC,IAAAA;AAAF,GAAe;AAC3B,sBACI;AAAA,4BACI;AAAA,gBAAKA,MAAM,CAACC;AAAZ;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAA;AAAA;AAAA;AAAA,YAFJ;AAAA,kBADJ;AAMH,CAPD;;KAAMF,M;;AASN,MAAMG,OAAO,GAAG,SAAiB;AAAA,MAAhB;AAAEC,IAAAA;AAAF,GAAgB;AAC7B,sBACI;AAAA,cACKA,OAAO,CAACC,GAAR,CAAaC,CAAD,iBACT;AAAA,iBACK,GADL,EAEKA,CAAC,CAACJ,IAFP,OAEcI,CAAC,CAACC,KAFhB;AAAA,OAAUD,CAAC,CAACJ,IAAZ;AAAA;AAAA;AAAA;AAAA,YADH;AADL;AAAA;AAAA;AAAA;AAAA,UADJ;AAUH,CAXD;;MAAMC,O;AAaN,eAAeA,OAAf","sourcesContent":["import React from 'react'\nimport { gql, useQuery } from '@apollo/client'\n\nconst FIND_PERSON = gql`\n  query findPersonByName($nameToSearch: String!) {\n    findPerson(name: $nameToSearch) {\n          id\n          name\n          phone\n          address{\n            street\n            city\n          }\n  }`\n\nconst Person = ({ person }) => {\n    return (\n        <>\n            <h2>{person.name}</h2>\n            <div>{}</div>\n        </>\n    )\n}\n\nconst Persons = ({ persons }) => {\n    return (\n        <div>\n            {persons.map((p) => (\n                <div key={p.name}>\n                    {' '}\n                    {p.name} {p.phone}\n                </div>\n            ))}\n        </div>\n    )\n}\n\nexport default Persons\n"]},"metadata":{},"sourceType":"module"}