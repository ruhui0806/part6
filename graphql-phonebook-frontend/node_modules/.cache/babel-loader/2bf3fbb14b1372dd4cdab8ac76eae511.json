{"ast":null,"code":"import { isReference, isField, DeepMerger, resultKeyNameFromField, shouldInclude, isNonNullObject, compact, createFragmentMap, getFragmentDefinitions } from \"../../utilities/index.js\";\nexport var hasOwn = Object.prototype.hasOwnProperty;\nexport function isNullish(value) {\n  return value === null || value === void 0;\n}\nexport var isArray = Array.isArray;\nexport function defaultDataIdFromObject(_a, context) {\n  var __typename = _a.__typename,\n      id = _a.id,\n      _id = _a._id;\n\n  if (typeof __typename === \"string\") {\n    if (context) {\n      context.keyObject = !isNullish(id) ? {\n        id: id\n      } : !isNullish(_id) ? {\n        _id: _id\n      } : void 0;\n    }\n\n    if (isNullish(id) && !isNullish(_id)) {\n      id = _id;\n    }\n\n    if (!isNullish(id)) {\n      return \"\".concat(__typename, \":\").concat(typeof id === \"number\" || typeof id === \"string\" ? id : JSON.stringify(id));\n    }\n  }\n}\nvar defaultConfig = {\n  dataIdFromObject: defaultDataIdFromObject,\n  addTypename: true,\n  resultCaching: true,\n  canonizeResults: false\n};\nexport function normalizeConfig(config) {\n  return compact(defaultConfig, config);\n}\nexport function shouldCanonizeResults(config) {\n  var value = config.canonizeResults;\n  return value === void 0 ? defaultConfig.canonizeResults : value;\n}\nexport function getTypenameFromStoreObject(store, objectOrReference) {\n  return isReference(objectOrReference) ? store.get(objectOrReference.__ref, \"__typename\") : objectOrReference && objectOrReference.__typename;\n}\nexport var TypeOrFieldNameRegExp = /^[_a-z][_0-9a-z]*/i;\nexport function fieldNameFromStoreName(storeFieldName) {\n  var match = storeFieldName.match(TypeOrFieldNameRegExp);\n  return match ? match[0] : storeFieldName;\n}\nexport function selectionSetMatchesResult(selectionSet, result, variables) {\n  if (isNonNullObject(result)) {\n    return isArray(result) ? result.every(function (item) {\n      return selectionSetMatchesResult(selectionSet, item, variables);\n    }) : selectionSet.selections.every(function (field) {\n      if (isField(field) && shouldInclude(field, variables)) {\n        var key = resultKeyNameFromField(field);\n        return hasOwn.call(result, key) && (!field.selectionSet || selectionSetMatchesResult(field.selectionSet, result[key], variables));\n      }\n\n      return true;\n    });\n  }\n\n  return false;\n}\nexport function storeValueIsStoreObject(value) {\n  return isNonNullObject(value) && !isReference(value) && !isArray(value);\n}\nexport function makeProcessedFieldsMerger() {\n  return new DeepMerger();\n}\nexport function extractFragmentContext(document, fragments) {\n  var fragmentMap = createFragmentMap(getFragmentDefinitions(document));\n  return {\n    fragmentMap: fragmentMap,\n    lookupFragment: function (name) {\n      var def = fragmentMap[name];\n\n      if (!def && fragments) {\n        def = fragments.lookup(name);\n      }\n\n      return def || null;\n    }\n  };\n}","map":{"version":3,"mappings":"AAUA,SAEEA,WAFF,EAKEC,OALF,EAMEC,UANF,EAOEC,sBAPF,EAQEC,aARF,EASEC,eATF,EAUEC,OAVF,EAaEC,iBAbF,EAcEC,sBAdF,QAeO,0BAfP;AAiBA,OACE,IAAgBC,MAAM,GACpBC,MAAM,CAACC,SAAP,CAAgBC,cADlB;AAGF,OAAM,SAAUC,SAAV,CAAoBC,KAApB,EAA8B;AAClC,SAAOA,KAAK,KAAK,IAAV,IAAkBA,KAAK,KAAK,KAAK,CAAxC;AACD;AAED,OAAO,IAAMC,OAAO,GAA4CC,KAAK,CAACD,OAA/D;AAEP,OAAM,SAAUE,uBAAV,CACJC,EADI,EAEJC,OAFI,EAEsB;MADxBC,UAAU;MAAEC,EAAE;MAAEC,GAAG;;AAGrB,MAAI,OAAOF,UAAP,KAAsB,QAA1B,EAAoC;AAClC,QAAID,OAAJ,EAAa;AACXA,aAAO,CAACI,SAAR,GACE,CAACV,SAAS,CAACQ,EAAD,CAAV,GAAiB;AAAEA,UAAE;AAAJ,OAAjB,GACA,CAACR,SAAS,CAACS,GAAD,CAAV,GAAkB;AAAEA,WAAG;AAAL,OAAlB,GACA,KAAK,CAHP;AAID;;AAGD,QAAIT,SAAS,CAACQ,EAAD,CAAT,IAAiB,CAACR,SAAS,CAACS,GAAD,CAA/B,EAAsC;AACpCD,QAAE,GAAGC,GAAL;AACD;;AAED,QAAI,CAACT,SAAS,CAACQ,EAAD,CAAd,EAAoB;AAClB,aAAO,UAAGD,UAAH,EAAa,GAAb,EAAaI,MAAb,CACL,OAAOH,EAAP,KAAc,QAAd,IACA,OAAOA,EAAP,KAAc,QAFQ,GAGpBA,EAHoB,GAGfI,IAAI,CAACC,SAAL,CAAeL,EAAf,CAHF,CAAP;AAID;AACF;AACF;AAED,IAAMM,aAAa,GAAG;AACpBC,kBAAgB,EAAEX,uBADE;AAEpBY,aAAW,EAAE,IAFO;AAGpBC,eAAa,EAAE,IAHK;AAMpBC,iBAAe,EAAE;AANG,CAAtB;AASA,OAAM,SAAUC,eAAV,CAA0BC,MAA1B,EAAqD;AACzD,SAAO3B,OAAO,CAACqB,aAAD,EAAgBM,MAAhB,CAAd;AACD;AAED,OAAM,SAAUC,qBAAV,CACJD,MADI,EACgD;AAEpD,MAAMnB,KAAK,GAAGmB,MAAM,CAACF,eAArB;AACA,SAAOjB,KAAK,KAAK,KAAK,CAAf,GAAmBa,aAAa,CAACI,eAAjC,GAAmDjB,KAA1D;AACD;AAED,OAAM,SAAUqB,0BAAV,CACJC,KADI,EAEJC,iBAFI,EAEsC;AAE1C,SAAOrC,WAAW,CAACqC,iBAAD,CAAX,GACHD,KAAK,CAACE,GAAN,CAAUD,iBAAiB,CAACE,KAA5B,EAAmC,YAAnC,CADG,GAEHF,iBAAiB,IAAIA,iBAAiB,CAACjB,UAF3C;AAGD;AAED,OAAO,IAAMoB,qBAAqB,GAAG,oBAA9B;AAEP,OAAM,SAAUC,sBAAV,CAAiCC,cAAjC,EAAuD;AAC3D,MAAMC,KAAK,GAAGD,cAAc,CAACC,KAAf,CAAqBH,qBAArB,CAAd;AACA,SAAOG,KAAK,GAAGA,KAAK,CAAC,CAAD,CAAR,GAAcD,cAA1B;AACD;AAED,OAAM,SAAUE,yBAAV,CACJC,YADI,EAEJC,MAFI,EAGJC,SAHI,EAG2B;AAE/B,MAAI1C,eAAe,CAACyC,MAAD,CAAnB,EAA6B;AAC3B,WAAO/B,OAAO,CAAC+B,MAAD,CAAP,GACHA,MAAM,CAACE,KAAP,CAAa,gBAAI;AAAI,sCAAyB,CAACH,YAAD,EAAeI,IAAf,EAAqBF,SAArB,CAAzB;AAAwD,KAA7E,CADG,GAEHF,YAAY,CAACK,UAAb,CAAwBF,KAAxB,CAA8B,iBAAK;AACnC,UAAI/C,OAAO,CAACkD,KAAD,CAAP,IAAkB/C,aAAa,CAAC+C,KAAD,EAAQJ,SAAR,CAAnC,EAAuD;AACrD,YAAMK,GAAG,GAAGjD,sBAAsB,CAACgD,KAAD,CAAlC;AACA,eAAO1C,MAAM,CAAC4C,IAAP,CAAYP,MAAZ,EAAoBM,GAApB,MACJ,CAACD,KAAK,CAACN,YAAP,IACAD,yBAAyB,CAACO,KAAK,CAACN,YAAP,EAAqBC,MAAM,CAACM,GAAD,CAA3B,EAAkCL,SAAlC,CAFrB,CAAP;AAGD;;AAMD,aAAO,IAAP;AACD,KAbC,CAFJ;AAgBD;;AACD,SAAO,KAAP;AACD;AAED,OAAM,SAAUO,uBAAV,CACJxC,KADI,EACa;AAEjB,SAAOT,eAAe,CAACS,KAAD,CAAf,IACL,CAACd,WAAW,CAACc,KAAD,CADP,IAEL,CAACC,OAAO,CAACD,KAAD,CAFV;AAGD;AAED,OAAM,SAAUyC,yBAAV,GAAmC;AACvC,SAAO,IAAIrD,UAAJ,EAAP;AACD;AAED,OAAM,SAAUsD,sBAAV,CACJC,QADI,EAEJC,SAFI,EAE2B;AAO/B,MAAMC,WAAW,GAAGpD,iBAAiB,CAACC,sBAAsB,CAACiD,QAAD,CAAvB,CAArC;AACA,SAAO;AACLE,eAAW,aADN;AAELC,kBAAc,EAAd,UAAeC,IAAf,EAAmB;AACjB,UAAIC,GAAG,GAAkCH,WAAW,CAACE,IAAD,CAApD;;AACA,UAAI,CAACC,GAAD,IAAQJ,SAAZ,EAAuB;AACrBI,WAAG,GAAGJ,SAAS,CAACK,MAAV,CAAiBF,IAAjB,CAAN;AACD;;AACD,aAAOC,GAAG,IAAI,IAAd;AACD;AARI,GAAP;AAUD","names":["isReference","isField","DeepMerger","resultKeyNameFromField","shouldInclude","isNonNullObject","compact","createFragmentMap","getFragmentDefinitions","hasOwn","Object","prototype","hasOwnProperty","isNullish","value","isArray","Array","defaultDataIdFromObject","_a","context","__typename","id","_id","keyObject","concat","JSON","stringify","defaultConfig","dataIdFromObject","addTypename","resultCaching","canonizeResults","normalizeConfig","config","shouldCanonizeResults","getTypenameFromStoreObject","store","objectOrReference","get","__ref","TypeOrFieldNameRegExp","fieldNameFromStoreName","storeFieldName","match","selectionSetMatchesResult","selectionSet","result","variables","every","item","selections","field","key","call","storeValueIsStoreObject","makeProcessedFieldsMerger","extractFragmentContext","document","fragments","fragmentMap","lookupFragment","name","def","lookup"],"sources":["/Users/kulta/Code/part6/graphql-phonebook-frontend/node_modules/@apollo/src/cache/inmemory/helpers.ts"],"sourcesContent":["import { DocumentNode, FragmentDefinitionNode, SelectionSetNode } from 'graphql';\n\nimport {\n  NormalizedCache,\n  InMemoryCacheConfig,\n} from './types';\n\nimport { KeyFieldsContext } from './policies';\nimport { FragmentRegistryAPI } from './fragmentRegistry';\n\nimport {\n  Reference,\n  isReference,\n  StoreValue,\n  StoreObject,\n  isField,\n  DeepMerger,\n  resultKeyNameFromField,\n  shouldInclude,\n  isNonNullObject,\n  compact,\n  FragmentMap,\n  FragmentMapFunction,\n  createFragmentMap,\n  getFragmentDefinitions,\n} from '../../utilities';\n\nexport const {\n  hasOwnProperty: hasOwn,\n} = Object.prototype;\n\nexport function isNullish(value: any): value is null | undefined {\n  return value === null || value === void 0;\n}\n\nexport const isArray: (a: any) => a is any[] | readonly any[] = Array.isArray;\n\nexport function defaultDataIdFromObject(\n  { __typename, id, _id }: Readonly<StoreObject>,\n  context?: KeyFieldsContext,\n): string | undefined {\n  if (typeof __typename === \"string\") {\n    if (context) {\n      context.keyObject =\n        !isNullish(id) ? { id } :\n        !isNullish(_id) ? { _id } :\n        void 0;\n    }\n\n    // If there is no object.id, fall back to object._id.\n    if (isNullish(id) && !isNullish(_id)) {\n      id = _id;\n    }\n\n    if (!isNullish(id)) {\n      return `${__typename}:${(\n        typeof id === \"number\" ||\n        typeof id === \"string\"\n      ) ? id : JSON.stringify(id)}`;\n    }\n  }\n}\n\nconst defaultConfig = {\n  dataIdFromObject: defaultDataIdFromObject,\n  addTypename: true,\n  resultCaching: true,\n  // Thanks to the shouldCanonizeResults helper, this should be the only line\n  // you have to change to reenable canonization by default in the future.\n  canonizeResults: false,\n};\n\nexport function normalizeConfig(config: InMemoryCacheConfig) {\n  return compact(defaultConfig, config);\n}\n\nexport function shouldCanonizeResults(\n  config: Pick<InMemoryCacheConfig, \"canonizeResults\">,\n): boolean {\n  const value = config.canonizeResults;\n  return value === void 0 ? defaultConfig.canonizeResults : value;\n}\n\nexport function getTypenameFromStoreObject(\n  store: NormalizedCache,\n  objectOrReference: StoreObject | Reference,\n): string | undefined {\n  return isReference(objectOrReference)\n    ? store.get(objectOrReference.__ref, \"__typename\") as string\n    : objectOrReference && objectOrReference.__typename;\n}\n\nexport const TypeOrFieldNameRegExp = /^[_a-z][_0-9a-z]*/i;\n\nexport function fieldNameFromStoreName(storeFieldName: string): string {\n  const match = storeFieldName.match(TypeOrFieldNameRegExp);\n  return match ? match[0] : storeFieldName;\n}\n\nexport function selectionSetMatchesResult(\n  selectionSet: SelectionSetNode,\n  result: Record<string, any>,\n  variables?: Record<string, any>,\n): boolean {\n  if (isNonNullObject(result)) {\n    return isArray(result)\n      ? result.every(item => selectionSetMatchesResult(selectionSet, item, variables))\n      : selectionSet.selections.every(field => {\n        if (isField(field) && shouldInclude(field, variables)) {\n          const key = resultKeyNameFromField(field);\n          return hasOwn.call(result, key) &&\n            (!field.selectionSet ||\n             selectionSetMatchesResult(field.selectionSet, result[key], variables));\n        }\n        // If the selection has been skipped with @skip(true) or\n        // @include(false), it should not count against the matching. If\n        // the selection is not a field, it must be a fragment (inline or\n        // named). We will determine if selectionSetMatchesResult for that\n        // fragment when we get to it, so for now we return true.\n        return true;\n      });\n  }\n  return false;\n}\n\nexport function storeValueIsStoreObject(\n  value: StoreValue,\n): value is StoreObject {\n  return isNonNullObject(value) &&\n    !isReference(value) &&\n    !isArray(value);\n}\n\nexport function makeProcessedFieldsMerger() {\n  return new DeepMerger;\n}\n\nexport function extractFragmentContext(\n  document: DocumentNode,\n  fragments?: FragmentRegistryAPI,\n): {\n  fragmentMap: FragmentMap;\n  lookupFragment: FragmentMapFunction;\n} {\n  // FragmentMap consisting only of fragments defined directly in document, not\n  // including other fragments registered in the FragmentRegistry.\n  const fragmentMap = createFragmentMap(getFragmentDefinitions(document));\n  return {\n    fragmentMap,\n    lookupFragment(name) {\n      let def: FragmentDefinitionNode | null = fragmentMap[name];\n      if (!def && fragments) {\n        def = fragments.lookup(name);\n      }\n      return def || null;\n    },\n  };\n}\n"]},"metadata":{},"sourceType":"module"}