{"ast":null,"code":"import { invariant } from \"../globals/index.js\";\nimport { visit, BREAK } from 'graphql';\nexport function shouldInclude(_a, variables) {\n  var directives = _a.directives;\n\n  if (!directives || !directives.length) {\n    return true;\n  }\n\n  return getInclusionDirectives(directives).every(function (_a) {\n    var directive = _a.directive,\n        ifArgument = _a.ifArgument;\n    var evaledValue = false;\n\n    if (ifArgument.value.kind === 'Variable') {\n      evaledValue = variables && variables[ifArgument.value.name.value];\n      __DEV__ ? invariant(evaledValue !== void 0, \"Invalid variable referenced in @\".concat(directive.name.value, \" directive.\")) : invariant(evaledValue !== void 0, 39);\n    } else {\n      evaledValue = ifArgument.value.value;\n    }\n\n    return directive.name.value === 'skip' ? !evaledValue : evaledValue;\n  });\n}\nexport function getDirectiveNames(root) {\n  var names = [];\n  visit(root, {\n    Directive: function (node) {\n      names.push(node.name.value);\n    }\n  });\n  return names;\n}\nexport var hasAnyDirectives = function (names, root) {\n  return hasDirectives(names, root, false);\n};\nexport var hasAllDirectives = function (names, root) {\n  return hasDirectives(names, root, true);\n};\nexport function hasDirectives(names, root, all) {\n  var nameSet = new Set(names);\n  var uniqueCount = nameSet.size;\n  visit(root, {\n    Directive: function (node) {\n      if (nameSet.delete(node.name.value) && (!all || !nameSet.size)) {\n        return BREAK;\n      }\n    }\n  });\n  return all ? !nameSet.size : nameSet.size < uniqueCount;\n}\nexport function hasClientExports(document) {\n  return document && hasDirectives(['client', 'export'], document, true);\n}\n\nfunction isInclusionDirective(_a) {\n  var value = _a.name.value;\n  return value === 'skip' || value === 'include';\n}\n\nexport function getInclusionDirectives(directives) {\n  var result = [];\n\n  if (directives && directives.length) {\n    directives.forEach(function (directive) {\n      if (!isInclusionDirective(directive)) return;\n      var directiveArguments = directive.arguments;\n      var directiveName = directive.name.value;\n      __DEV__ ? invariant(directiveArguments && directiveArguments.length === 1, \"Incorrect number of arguments for the @\".concat(directiveName, \" directive.\")) : invariant(directiveArguments && directiveArguments.length === 1, 40);\n      var ifArgument = directiveArguments[0];\n      __DEV__ ? invariant(ifArgument.name && ifArgument.name.value === 'if', \"Invalid argument for the @\".concat(directiveName, \" directive.\")) : invariant(ifArgument.name && ifArgument.name.value === 'if', 41);\n      var ifValue = ifArgument.value;\n      __DEV__ ? invariant(ifValue && (ifValue.kind === 'Variable' || ifValue.kind === 'BooleanValue'), \"Argument for the @\".concat(directiveName, \" directive must be a variable or a boolean value.\")) : invariant(ifValue && (ifValue.kind === 'Variable' || ifValue.kind === 'BooleanValue'), 42);\n      result.push({\n        directive: directive,\n        ifArgument: ifArgument\n      });\n    });\n  }\n\n  return result;\n}","map":{"version":3,"mappings":"AAAA,SAASA,SAAT,QAA0B,qBAA1B;AAIA,SASEC,KATF,EAUEC,KAVF,QAWO,SAXP;AAiBA,OAAM,SAAUC,aAAV,CACJC,EADI,EAEJC,SAFI,EAE2B;MAD7BC,UAAU;;AAGZ,MAAI,CAACA,UAAD,IAAe,CAACA,UAAU,CAACC,MAA/B,EAAuC;AACrC,WAAO,IAAP;AACD;;AACD,SAAOC,sBAAsB,CAC3BF,UAD2B,CAAtB,CAELG,KAFK,CAEC,UAACL,EAAD,EAA0B;QAAvBM,SAAS;QAAEC,UAAU;AAC9B,QAAIC,WAAW,GAAY,KAA3B;;AACA,QAAID,UAAU,CAACE,KAAX,CAAiBC,IAAjB,KAA0B,UAA9B,EAA0C;AACxCF,iBAAW,GAAGP,SAAS,IAAIA,SAAS,CAAEM,UAAU,CAACE,KAAX,CAAkCE,IAAlC,CAAuCF,KAAzC,CAApC;AACAG,gBACEhB,qBAAqB,KACrB,MADA,EACA,mCAAmCiB,MAAnC,CAA6CP,SAAK,CAAKK,IAAV,CAAUF,KAAvD,EAAuD,aAAvD,CADA,CADF,GAGEb,qCAHF;AAID,KAND,MAMO;AACLY,iBAAW,GAAID,UAAU,CAACE,KAAX,CAAsCA,KAArD;AACD;;AACD,WAAOH,SAAS,CAACK,IAAV,CAAeF,KAAf,KAAyB,MAAzB,GAAkC,CAACD,WAAnC,GAAiDA,WAAxD;AACD,GAdM,CAAP;AAeD;AAED,OAAM,SAAUM,iBAAV,CAA4BC,IAA5B,EAAyC;AAC7C,MAAMC,KAAK,GAAa,EAAxB;AAEAnB,OAAK,CAACkB,IAAD,EAAO;AACVE,aAAS,EAAT,UAAUC,IAAV,EAA6B;AAC3BF,WAAK,CAACG,IAAN,CAAWD,IAAI,CAACP,IAAL,CAAUF,KAArB;AACD;AAHS,GAAP,CAAL;AAMA,SAAOO,KAAP;AACD;AAED,OAAO,IAAMI,gBAAgB,GAAG,UAC9BJ,KAD8B,EAE9BD,IAF8B,EAEjB;AACV,sBAAa,CAACC,KAAD,EAAQD,IAAR,EAAc,KAAd,CAAb;AAAiC,CAH/B;AAKP,OAAO,IAAMM,gBAAgB,GAAG,UAC9BL,KAD8B,EAE9BD,IAF8B,EAEjB;AACV,sBAAa,CAACC,KAAD,EAAQD,IAAR,EAAc,IAAd,CAAb;AAAgC,CAH9B;AAKP,OAAM,SAAUO,aAAV,CACJN,KADI,EAEJD,IAFI,EAGJQ,GAHI,EAGS;AAEb,MAAMC,OAAO,GAAG,IAAIC,GAAJ,CAAQT,KAAR,CAAhB;AACA,MAAMU,WAAW,GAAGF,OAAO,CAACG,IAA5B;AAEA9B,OAAK,CAACkB,IAAD,EAAO;AACVE,aAAS,YAACC,IAAD,EAAK;AACZ,UACEM,OAAO,CAACI,MAAR,CAAeV,IAAI,CAACP,IAAL,CAAUF,KAAzB,MACC,CAACc,GAAD,IAAQ,CAACC,OAAO,CAACG,IADlB,CADF,EAGE;AACA,eAAO7B,KAAP;AACD;AACF;AARS,GAAP,CAAL;AAaA,SAAOyB,GAAG,GAAG,CAACC,OAAO,CAACG,IAAZ,GAAmBH,OAAO,CAACG,IAAR,GAAeD,WAA5C;AACD;AAED,OAAM,SAAUG,gBAAV,CAA2BC,QAA3B,EAAiD;AACrD,SAAOA,QAAQ,IAAIR,aAAa,CAAC,CAAC,QAAD,EAAW,QAAX,CAAD,EAAuBQ,QAAvB,EAAiC,IAAjC,CAAhC;AACD;;AAOD,SAASC,oBAAT,CAA8B/B,EAA9B,EAAgE;MAAxBS,KAAK;AAC3C,SAAOA,KAAK,KAAK,MAAV,IAAoBA,KAAK,KAAK,SAArC;AACD;;AAED,OAAM,SAAUL,sBAAV,CACJF,UADI,EACoC;AAExC,MAAM8B,MAAM,GAAwB,EAApC;;AAEA,MAAI9B,UAAU,IAAIA,UAAU,CAACC,MAA7B,EAAqC;AACnCD,cAAU,CAAC+B,OAAX,CAAmB,qBAAS;AAC1B,UAAI,CAACF,oBAAoB,CAACzB,SAAD,CAAzB,EAAsC;AAEtC,UAAM4B,kBAAkB,GAAG5B,SAAS,CAAC6B,SAArC;AACA,UAAMC,aAAa,GAAG9B,SAAS,CAACK,IAAV,CAAeF,KAArC;AAEAG,gBACEhB,4BAAsB,sBAAyB,OAAzB,KACtB,CADA,EACA,0CAA0CiB,MAA1C,CAA0CuB,aAA1C,EAAuD,aAAvD,CADA,CADF,GAGExC,oEAHF;AAKA,UAAMW,UAAU,GAAG2B,kBAAmB,CAAC,CAAD,CAAtC;AACAtB,gBACEhB,UAAUW,UAAS,KAAT,IAAmBA,UAAM,CAAKI,IAAX,CAAgBF,KAAhB,KAC7B,IADA,EACA,6BAA6BI,MAA7B,CAA6BuB,aAA7B,EAA0C,aAA1C,CADA,CADF,GAGExC,gEAHF;AAKA,UAAMyC,OAAO,GAAc9B,UAAU,CAACE,KAAtC;AAGAG,gBACEhB,SAAO,aACJyC,OAAO,CAAC3B,IAAR,KAAiB,UAAjB,IAA+B2B,OAAO,CAAC3B,IAAR,KAAiB,cAD5C,GAEP,4BAAqB0B,aAArB,EAAkC,mDAAlC,CAFO,CADT,GAIExC,sBAEFyC,OAAY,KAAZ,KAAc,UAAd,IAAyBA,iBAAU,cAFjC,GAEqC,EAFrC,CAJF;AAOCL;AAAA1B;AAAAC;AAAA;AACJ,KA5BC;AA8BF;;AACD","names":["invariant","visit","BREAK","shouldInclude","_a","variables","directives","length","getInclusionDirectives","every","directive","ifArgument","evaledValue","value","kind","name","__DEV__","concat","getDirectiveNames","root","names","Directive","node","push","hasAnyDirectives","hasAllDirectives","hasDirectives","all","nameSet","Set","uniqueCount","size","delete","hasClientExports","document","isInclusionDirective","result","forEach","directiveArguments","arguments","directiveName","ifValue"],"sources":["/Users/kulta/Code/part6/graphql-phonebook-frontend/node_modules/@apollo/src/utilities/graphql/directives.ts"],"sourcesContent":["import { invariant } from '../globals';\n\n// Provides the methods that allow QueryManager to handle the `skip` and\n// `include` directives within GraphQL.\nimport {\n  SelectionNode,\n  VariableNode,\n  BooleanValueNode,\n  DirectiveNode,\n  DocumentNode,\n  ArgumentNode,\n  ValueNode,\n  ASTNode,\n  visit,\n  BREAK,\n} from 'graphql';\n\nexport type DirectiveInfo = {\n  [fieldName: string]: { [argName: string]: any };\n};\n\nexport function shouldInclude(\n  { directives }: SelectionNode,\n  variables?: Record<string, any>,\n): boolean {\n  if (!directives || !directives.length) {\n    return true;\n  }\n  return getInclusionDirectives(\n    directives\n  ).every(({ directive, ifArgument }) => {\n    let evaledValue: boolean = false;\n    if (ifArgument.value.kind === 'Variable') {\n      evaledValue = variables && variables[(ifArgument.value as VariableNode).name.value];\n      invariant(\n        evaledValue !== void 0,\n        `Invalid variable referenced in @${directive.name.value} directive.`,\n      );\n    } else {\n      evaledValue = (ifArgument.value as BooleanValueNode).value;\n    }\n    return directive.name.value === 'skip' ? !evaledValue : evaledValue;\n  });\n}\n\nexport function getDirectiveNames(root: ASTNode) {\n  const names: string[] = [];\n\n  visit(root, {\n    Directive(node: DirectiveNode) {\n      names.push(node.name.value);\n    },\n  });\n\n  return names;\n}\n\nexport const hasAnyDirectives = (\n  names: string[],\n  root: ASTNode,\n) => hasDirectives(names, root, false);\n\nexport const hasAllDirectives = (\n  names: string[],\n  root: ASTNode,\n) => hasDirectives(names, root, true);\n\nexport function hasDirectives(\n  names: string[],\n  root: ASTNode,\n  all?: boolean,\n) {\n  const nameSet = new Set(names);\n  const uniqueCount = nameSet.size;\n\n  visit(root, {\n    Directive(node) {\n      if (\n        nameSet.delete(node.name.value) &&\n        (!all || !nameSet.size)\n      ) {\n        return BREAK;\n      }\n    },\n  });\n\n  // If we found all the names, nameSet will be empty. If we only care about\n  // finding some of them, the < condition is sufficient.\n  return all ? !nameSet.size : nameSet.size < uniqueCount;\n}\n\nexport function hasClientExports(document: DocumentNode) {\n  return document && hasDirectives(['client', 'export'], document, true);\n}\n\nexport type InclusionDirectives = Array<{\n  directive: DirectiveNode;\n  ifArgument: ArgumentNode;\n}>;\n\nfunction isInclusionDirective({ name: { value } }: DirectiveNode): boolean {\n  return value === 'skip' || value === 'include';\n}\n\nexport function getInclusionDirectives(\n  directives: ReadonlyArray<DirectiveNode>,\n): InclusionDirectives {\n  const result: InclusionDirectives = [];\n\n  if (directives && directives.length) {\n    directives.forEach(directive => {\n      if (!isInclusionDirective(directive)) return;\n\n      const directiveArguments = directive.arguments;\n      const directiveName = directive.name.value;\n\n      invariant(\n        directiveArguments && directiveArguments.length === 1,\n        `Incorrect number of arguments for the @${directiveName} directive.`,\n      );\n\n      const ifArgument = directiveArguments![0];\n      invariant(\n        ifArgument.name && ifArgument.name.value === 'if',\n        `Invalid argument for the @${directiveName} directive.`,\n      );\n\n      const ifValue: ValueNode = ifArgument.value;\n\n      // means it has to be a variable value if this is a valid @skip or @include directive\n      invariant(\n        ifValue &&\n          (ifValue.kind === 'Variable' || ifValue.kind === 'BooleanValue'),\n        `Argument for the @${directiveName} directive must be a variable or a boolean value.`,\n      );\n\n      result.push({ directive, ifArgument });\n    });\n  }\n\n  return result;\n}\n\n"]},"metadata":{},"sourceType":"module"}