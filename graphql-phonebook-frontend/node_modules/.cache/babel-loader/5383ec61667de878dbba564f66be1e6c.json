{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { useCallback, useEffect, useRef, useState } from 'react';\nimport { mergeOptions } from \"../../core/index.js\";\nimport { equal } from '@wry/equality';\nimport { DocumentType, verifyDocumentType } from \"../parser/index.js\";\nimport { ApolloError } from \"../../errors/index.js\";\nimport { useApolloClient } from \"./useApolloClient.js\";\nexport function useMutation(mutation, options) {\n  var client = useApolloClient(options === null || options === void 0 ? void 0 : options.client);\n  verifyDocumentType(mutation, DocumentType.Mutation);\n\n  var _a = useState({\n    called: false,\n    loading: false,\n    client: client\n  }),\n      result = _a[0],\n      setResult = _a[1];\n\n  var ref = useRef({\n    result: result,\n    mutationId: 0,\n    isMounted: true,\n    client: client,\n    mutation: mutation,\n    options: options\n  });\n  {\n    Object.assign(ref.current, {\n      client: client,\n      options: options,\n      mutation: mutation\n    });\n  }\n  var execute = useCallback(function (executeOptions) {\n    if (executeOptions === void 0) {\n      executeOptions = {};\n    }\n\n    var _a = ref.current,\n        client = _a.client,\n        options = _a.options,\n        mutation = _a.mutation;\n\n    var baseOptions = __assign(__assign({}, options), {\n      mutation: mutation\n    });\n\n    if (!ref.current.result.loading && !baseOptions.ignoreResults && ref.current.isMounted) {\n      setResult(ref.current.result = {\n        loading: true,\n        error: void 0,\n        data: void 0,\n        called: true,\n        client: client\n      });\n    }\n\n    var mutationId = ++ref.current.mutationId;\n    var clientOptions = mergeOptions(baseOptions, executeOptions);\n    return client.mutate(clientOptions).then(function (response) {\n      var _a, _b, _c;\n\n      var data = response.data,\n          errors = response.errors;\n      var error = errors && errors.length > 0 ? new ApolloError({\n        graphQLErrors: errors\n      }) : void 0;\n\n      if (mutationId === ref.current.mutationId && !clientOptions.ignoreResults) {\n        var result_1 = {\n          called: true,\n          loading: false,\n          data: data,\n          error: error,\n          client: client\n        };\n\n        if (ref.current.isMounted && !equal(ref.current.result, result_1)) {\n          setResult(ref.current.result = result_1);\n        }\n      }\n\n      (_b = (_a = ref.current.options) === null || _a === void 0 ? void 0 : _a.onCompleted) === null || _b === void 0 ? void 0 : _b.call(_a, response.data, clientOptions);\n      (_c = executeOptions.onCompleted) === null || _c === void 0 ? void 0 : _c.call(executeOptions, response.data, clientOptions);\n      return response;\n    }).catch(function (error) {\n      var _a, _b, _c, _d;\n\n      if (mutationId === ref.current.mutationId && ref.current.isMounted) {\n        var result_2 = {\n          loading: false,\n          error: error,\n          data: void 0,\n          called: true,\n          client: client\n        };\n\n        if (!equal(ref.current.result, result_2)) {\n          setResult(ref.current.result = result_2);\n        }\n      }\n\n      if (((_a = ref.current.options) === null || _a === void 0 ? void 0 : _a.onError) || clientOptions.onError) {\n        (_c = (_b = ref.current.options) === null || _b === void 0 ? void 0 : _b.onError) === null || _c === void 0 ? void 0 : _c.call(_b, error, clientOptions);\n        (_d = executeOptions.onError) === null || _d === void 0 ? void 0 : _d.call(executeOptions, error, clientOptions);\n        return {\n          data: void 0,\n          errors: error\n        };\n      }\n\n      throw error;\n    });\n  }, []);\n  var reset = useCallback(function () {\n    if (ref.current.isMounted) {\n      setResult({\n        called: false,\n        loading: false,\n        client: client\n      });\n    }\n  }, []);\n  useEffect(function () {\n    ref.current.isMounted = true;\n    return function () {\n      ref.current.isMounted = false;\n    };\n  }, []);\n  return [execute, __assign({\n    reset: reset\n  }, result)];\n}","map":{"version":3,"mappings":"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","names":["useCallback","useEffect","useRef","useState","mergeOptions","equal","DocumentType","verifyDocumentType","ApolloError","useApolloClient","useMutation","mutation","options","client","Mutation","called","loading","result","setResult","ref","mutationId","isMounted","Object","assign","current","execute","executeOptions","baseOptions","ignoreResults","error","data","clientOptions","mutate","then","response","errors","length","graphQLErrors","result_1","_a","onCompleted","_b","_c","catch","result_2","onError","_d","reset","__assign"],"sources":["/Users/kulta/Code/part6/graphql-phonebook-frontend/node_modules/@apollo/src/react/hooks/useMutation.ts"],"sourcesContent":["import { useCallback, useEffect, useRef, useState } from 'react';\nimport { DocumentNode } from 'graphql';\nimport { TypedDocumentNode } from '@graphql-typed-document-node/core';\nimport {\n  MutationFunctionOptions,\n  MutationHookOptions,\n  MutationResult,\n  MutationTuple,\n} from '../types/types';\n\nimport {\n  ApolloCache,\n  DefaultContext,\n  mergeOptions,\n  OperationVariables,\n} from '../../core';\nimport { equal } from '@wry/equality';\nimport { DocumentType, verifyDocumentType } from '../parser';\nimport { ApolloError } from '../../errors';\nimport { useApolloClient } from './useApolloClient';\n\nexport function useMutation<\n  TData = any,\n  TVariables = OperationVariables,\n  TContext = DefaultContext,\n  TCache extends ApolloCache<any> = ApolloCache<any>,\n>(\n  mutation: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options?: MutationHookOptions<TData, TVariables, TContext>,\n): MutationTuple<TData, TVariables, TContext, TCache> {\n  const client = useApolloClient(options?.client);\n  verifyDocumentType(mutation, DocumentType.Mutation);\n  const [result, setResult] = useState<Omit<MutationResult, 'reset'>>({\n    called: false,\n    loading: false,\n    client,\n  });\n\n  const ref = useRef({\n    result,\n    mutationId: 0,\n    isMounted: true,\n    client,\n    mutation,\n    options,\n  });\n\n  // TODO: Trying to assign these in a useEffect or useLayoutEffect breaks\n  // higher-order components.\n  {\n    Object.assign(ref.current, { client, options, mutation });\n  }\n\n  const execute = useCallback((\n    executeOptions: MutationFunctionOptions<\n      TData,\n      TVariables,\n      TContext,\n      TCache\n    > = {}\n  ) => {\n    const {client, options, mutation} = ref.current;\n    const baseOptions = { ...options, mutation };\n    if (!ref.current.result.loading && !baseOptions.ignoreResults && ref.current.isMounted) {\n      setResult(ref.current.result = {\n        loading: true,\n        error: void 0,\n        data: void 0,\n        called: true,\n        client,\n      });\n    }\n\n    const mutationId = ++ref.current.mutationId;\n    const clientOptions = mergeOptions(\n      baseOptions,\n      executeOptions as any,\n    );\n\n    return client.mutate(clientOptions).then((response) => {\n      const { data, errors } = response;\n      const error =\n        errors && errors.length > 0\n          ? new ApolloError({ graphQLErrors: errors })\n          : void 0;\n\n      if (\n        mutationId === ref.current.mutationId &&\n        !clientOptions.ignoreResults\n      ) {\n        const result = {\n          called: true,\n          loading: false,\n          data,\n          error,\n          client,\n        };\n\n        if (ref.current.isMounted && !equal(ref.current.result, result)) {\n          setResult(ref.current.result = result);\n        }\n      }\n      ref.current.options?.onCompleted?.(response.data!, clientOptions);\n      executeOptions.onCompleted?.(response.data!, clientOptions);\n      return response;\n    }).catch((error) => {\n      if (\n        mutationId === ref.current.mutationId &&\n        ref.current.isMounted\n      ) {\n        const result = {\n          loading: false,\n          error,\n          data: void 0,\n          called: true,\n          client,\n        };\n\n        if (!equal(ref.current.result, result)) {\n          setResult(ref.current.result = result);\n        }\n      }\n\n      if (ref.current.options?.onError || clientOptions.onError) {\n        ref.current.options?.onError?.(error, clientOptions);\n        executeOptions.onError?.(error, clientOptions);\n        // TODO(brian): why are we returning this here???\n        return { data: void 0, errors: error };\n      }\n\n      throw error;\n    });\n  }, []);\n\n  const reset = useCallback(() => {\n    if (ref.current.isMounted) {\n      setResult({ called: false, loading: false, client });\n    }\n  }, []);\n\n  useEffect(() => {\n    ref.current.isMounted = true;\n\n    return () => {\n      ref.current.isMounted = false;\n    };\n  }, []);\n\n  return [execute, { reset, ...result }];\n}\n"]},"metadata":{},"sourceType":"module"}