{"ast":null,"code":"import { canUseAsyncIteratorSymbol } from \"../../../utilities/index.js\";\nexport default function promiseIterator(promise) {\n  var resolved = false;\n  var iterator = {\n    next: function () {\n      if (resolved) return Promise.resolve({\n        value: undefined,\n        done: true\n      });\n      resolved = true;\n      return new Promise(function (resolve, reject) {\n        promise.then(function (value) {\n          resolve({\n            value: value,\n            done: false\n          });\n        }).catch(reject);\n      });\n    }\n  };\n\n  if (canUseAsyncIteratorSymbol) {\n    iterator[Symbol.asyncIterator] = function () {\n      return this;\n    };\n  }\n\n  return iterator;\n}","map":{"version":3,"mappings":"AAKA,SAASA,yBAAT,QAA0C,6BAA1C;AAOA,eAAc,SAAUC,eAAV,CACZC,OADY,EACiB;AAE7B,MAAIC,QAAQ,GAAG,KAAf;AAEA,MAAMC,QAAQ,GAAuB;AACnCC,QAAI,EAAJ;AACE,UAAIF,QAAJ,EACE,OAAOG,OAAO,CAACC,OAAR,CAAgB;AACrBC,aAAK,EAAEC,SADc;AAErBC,YAAI,EAAE;AAFe,OAAhB,CAAP;AAIFP,cAAQ,GAAG,IAAX;AACA,aAAO,IAAIG,OAAJ,CAAY,UAAUC,OAAV,EAAmBI,MAAnB,EAAyB;AAC1CT,eAAO,CACJU,IADH,CACQ,UAAUJ,KAAV,EAAe;AACnBD,iBAAO,CAAC;AAAEC,iBAAK,EAAEA,KAAT;AAAgCE,gBAAI,EAAE;AAAtC,WAAD,CAAP;AACD,SAHH,EAIGG,KAJH,CAISF,MAJT;AAKD,OANM,CAAP;AAOD;AAfkC,GAArC;;AAkBA,MAAIX,yBAAJ,EAA+B;AAC7BI,YAAQ,CAACU,MAAM,CAACC,aAAR,CAAR,GAAiC;AAC/B,aAAO,IAAP;AACD,KAFD;AAGD;;AAED,SAAOX,QAAP;AACD","names":["canUseAsyncIteratorSymbol","promiseIterator","promise","resolved","iterator","next","Promise","resolve","value","undefined","done","reject","then","catch","Symbol","asyncIterator"],"sources":["/Users/kulta/Code/part6/graphql-phonebook-frontend/node_modules/@apollo/src/link/http/iterators/promise.ts"],"sourcesContent":["/**\n * Original source:\n * https://github.com/kmalakoff/response-iterator/blob/master/src/iterators/promise.ts\n */\n\nimport { canUseAsyncIteratorSymbol } from \"../../../utilities\";\n\ninterface PromiseIterator<T> {\n  next(): Promise<IteratorResult<T, ArrayBuffer | undefined>>;\n  [Symbol.asyncIterator]?(): AsyncIterator<T>;\n}\n\nexport default function promiseIterator<T = ArrayBuffer>(\n  promise: Promise<ArrayBuffer>\n): AsyncIterableIterator<T> {\n  let resolved = false;\n\n  const iterator: PromiseIterator<T> = {\n    next(): Promise<IteratorResult<T, ArrayBuffer | undefined>> {\n      if (resolved)\n        return Promise.resolve({\n          value: undefined,\n          done: true,\n        });\n      resolved = true;\n      return new Promise(function (resolve, reject) {\n        promise\n          .then(function (value) {\n            resolve({ value: value as unknown as T, done: false });\n          })\n          .catch(reject);\n      });\n    },\n  };\n\n  if (canUseAsyncIteratorSymbol) {\n    iterator[Symbol.asyncIterator] = function (): AsyncIterator<T> {\n      return this;\n    };\n  }\n\n  return iterator as AsyncIterableIterator<T>;\n}\n"]},"metadata":{},"sourceType":"module"}