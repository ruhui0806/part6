{"ast":null,"code":"// A [trie](https://en.wikipedia.org/wiki/Trie) data structure that holds\n// object keys weakly, yet can also hold non-object keys, unlike the\n// native `WeakMap`.\n// If no makeData function is supplied, the looked-up data will be an empty,\n// null-prototype Object.\nvar defaultMakeData = function () {\n  return Object.create(null);\n}; // Useful for processing arguments objects as well as arrays.\n\n\nvar _a = Array.prototype,\n    forEach = _a.forEach,\n    slice = _a.slice;\n\nvar Trie =\n/** @class */\nfunction () {\n  function Trie(weakness, makeData) {\n    if (weakness === void 0) {\n      weakness = true;\n    }\n\n    if (makeData === void 0) {\n      makeData = defaultMakeData;\n    }\n\n    this.weakness = weakness;\n    this.makeData = makeData;\n  }\n\n  Trie.prototype.lookup = function () {\n    var array = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      array[_i] = arguments[_i];\n    }\n\n    return this.lookupArray(array);\n  };\n\n  Trie.prototype.lookupArray = function (array) {\n    var node = this;\n    forEach.call(array, function (key) {\n      return node = node.getChildTrie(key);\n    });\n    return node.data || (node.data = this.makeData(slice.call(array)));\n  };\n\n  Trie.prototype.getChildTrie = function (key) {\n    var map = this.weakness && isObjRef(key) ? this.weak || (this.weak = new WeakMap()) : this.strong || (this.strong = new Map());\n    var child = map.get(key);\n    if (!child) map.set(key, child = new Trie(this.weakness, this.makeData));\n    return child;\n  };\n\n  return Trie;\n}();\n\nfunction isObjRef(value) {\n  switch (typeof value) {\n    case \"object\":\n      if (value === null) break;\n    // Fall through to return true...\n\n    case \"function\":\n      return true;\n  }\n\n  return false;\n}\n\nexport { Trie };","map":{"version":3,"mappings":"AAAA;AACA;AACA;AAEA;AACA;AACA,IAAMA,eAAe,GAAG,YAAM;AAAA,eAAM,CAACC,MAAP,CAAc,IAAd;AAAmB,CAAjD,C,CAEA;;;AACM,SAAqBC,KAAK,CAACC,SAA3B;AAAA,IAAEC,OAAO,aAAT;AAAA,IAAWC,KAAK,WAAhB;;AAEN;AAAA;AAAA;AAQE,WACUC,IADV,CACUC,QADV,EAEUC,QAFV,EAE4D;AADlD;AAAAD,cAAe,OAAf;AAAe;;AACf;AAAAC,cAAkD,kBAAlD;AAAkD;;AADlD,SAAQD,QAAR;AACA,SAAQC,QAAR;AACN;;AAEGF,0BAAP;AAA+B,QAAWG,UAAX;;SAAA,IAAWC,QAAXA,EAAW,qBAAXA,EAAW;AAAXD,WAAW,IAAX,GAAWE,aAAX;;;AAC7B,WAAO,KAAKC,WAAL,CAAiBH,KAAjB,CAAP;AACD,GAFM;;AAIAH,MAAW,UAAX,CAAWM,WAAX,GAAP,UAAiDH,KAAjD,EAAyD;AACvD,QAAII,IAAI,GAAe,IAAvB;AACAT,WAAO,CAACU,IAAR,CAAaL,KAAb,EAAoB,eAAG;AAAI,iBAAI,GAAGI,IAAI,CAACE,YAAL,CAAkBC,GAAlB,CAAP;AAA6B,KAAxD;AACA,WAAOH,IAAI,CAACI,IAAL,KAAcJ,IAAI,CAACI,IAAL,GAAY,KAAKT,QAAL,CAAcH,KAAK,CAACS,IAAN,CAAWL,KAAX,CAAd,CAA1B,CAAP;AACD,GAJM;;AAMCH,MAAY,UAAZ,CAAYS,YAAZ,GAAR,UAAqBC,GAArB,EAA6B;AAC3B,QAAME,GAAG,GAAG,KAAKX,QAAL,IAAiBY,QAAQ,CAACH,GAAD,CAAzB,GACR,KAAKI,IAAL,KAAc,KAAKA,IAAL,GAAY,IAAIC,OAAJ,EAA1B,CADQ,GAER,KAAKC,MAAL,KAAgB,KAAKA,MAAL,GAAc,IAAIC,GAAJ,EAA9B,CAFJ;AAGA,QAAIC,KAAK,GAAGN,GAAG,CAACO,GAAJ,CAAQT,GAAR,CAAZ;AACA,QAAI,CAACQ,KAAL,EAAYN,GAAG,CAACQ,GAAJ,CAAQV,GAAR,EAAaQ,KAAK,GAAG,IAAIlB,IAAJ,CAAe,KAAKC,QAApB,EAA8B,KAAKC,QAAnC,CAArB;AACZ,WAAOgB,KAAP;AACD,GAPO;;AAQV,SAAClB,IAAD;AAAC,CA/BD;;AAiCA,SAASa,QAAT,CAAkBQ,KAAlB,EAA4B;AAC1B,UAAQ,OAAOA,KAAf;AACA,SAAK,QAAL;AACE,UAAIA,KAAK,KAAK,IAAd,EAAoB;;;AAEtB,SAAK,UAAL;AACE,aAAO,IAAP;AALF;;AAOA,SAAO,KAAP;AACF","names":["defaultMakeData","create","Array","prototype","forEach","slice","Trie","weakness","makeData","array","_i","arguments","lookupArray","node","call","getChildTrie","key","data","map","isObjRef","weak","WeakMap","strong","Map","child","get","set","value"],"sources":["/Users/kulta/Code/part6/graphql-phonebook-frontend/node_modules/@wry/trie/src/trie.ts"],"sourcesContent":["// A [trie](https://en.wikipedia.org/wiki/Trie) data structure that holds\n// object keys weakly, yet can also hold non-object keys, unlike the\n// native `WeakMap`.\n\n// If no makeData function is supplied, the looked-up data will be an empty,\n// null-prototype Object.\nconst defaultMakeData = () => Object.create(null);\n\n// Useful for processing arguments objects as well as arrays.\nconst { forEach, slice } = Array.prototype;\n\nexport class Trie<Data> {\n  // Since a `WeakMap` cannot hold primitive values as keys, we need a\n  // backup `Map` instance to hold primitive keys. Both `this._weakMap`\n  // and `this._strongMap` are lazily initialized.\n  private weak?: WeakMap<any, Trie<Data>>;\n  private strong?: Map<any, Trie<Data>>;\n  private data?: Data;\n\n  constructor(\n    private weakness = true,\n    private makeData: (array: any[]) => Data = defaultMakeData,\n  ) {}\n\n  public lookup<T extends any[]>(...array: T): Data {\n    return this.lookupArray(array);\n  }\n\n  public lookupArray<T extends IArguments | any[]>(array: T): Data {\n    let node: Trie<Data> = this;\n    forEach.call(array, key => node = node.getChildTrie(key));\n    return node.data || (node.data = this.makeData(slice.call(array)));\n  }\n\n  private getChildTrie(key: any) {\n    const map = this.weakness && isObjRef(key)\n      ? this.weak || (this.weak = new WeakMap<any, Trie<Data>>())\n      : this.strong || (this.strong = new Map<any, Trie<Data>>());\n    let child = map.get(key);\n    if (!child) map.set(key, child = new Trie<Data>(this.weakness, this.makeData));\n    return child;\n  }\n}\n\nfunction isObjRef(value: any) {\n  switch (typeof value) {\n  case \"object\":\n    if (value === null) break;\n    // Fall through to return true...\n  case \"function\":\n    return true;\n  }\n  return false;\n}\n"]},"metadata":{},"sourceType":"module"}