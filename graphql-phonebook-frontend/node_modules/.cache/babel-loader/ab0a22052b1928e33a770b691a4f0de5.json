{"ast":null,"code":"import { __assign, __rest } from \"tslib\";\nimport \"../../utilities/globals/index.js\";\nimport { visit } from 'graphql';\nimport { ApolloLink } from \"../core/index.js\";\nimport { Observable, hasDirectives } from \"../../utilities/index.js\";\nimport { serializeFetchParameter } from \"./serializeFetchParameter.js\";\nimport { selectURI } from \"./selectURI.js\";\nimport { handleError, readMultipartBody, readJsonBody } from \"./parseAndCheckHttpResponse.js\";\nimport { checkFetcher } from \"./checkFetcher.js\";\nimport { selectHttpOptionsAndBodyInternal, defaultPrinter, fallbackHttpConfig } from \"./selectHttpOptionsAndBody.js\";\nimport { createSignalIfSupported } from \"./createSignalIfSupported.js\";\nimport { rewriteURIForGET } from \"./rewriteURIForGET.js\";\nimport { fromError } from \"../utils/index.js\";\nimport { maybe } from \"../../utilities/index.js\";\nvar backupFetch = maybe(function () {\n  return fetch;\n});\nexport var createHttpLink = function (linkOptions) {\n  if (linkOptions === void 0) {\n    linkOptions = {};\n  }\n\n  var _a = linkOptions.uri,\n      uri = _a === void 0 ? '/graphql' : _a,\n      preferredFetch = linkOptions.fetch,\n      _b = linkOptions.print,\n      print = _b === void 0 ? defaultPrinter : _b,\n      includeExtensions = linkOptions.includeExtensions,\n      preserveHeaderCase = linkOptions.preserveHeaderCase,\n      useGETForQueries = linkOptions.useGETForQueries,\n      _c = linkOptions.includeUnusedVariables,\n      includeUnusedVariables = _c === void 0 ? false : _c,\n      requestOptions = __rest(linkOptions, [\"uri\", \"fetch\", \"print\", \"includeExtensions\", \"preserveHeaderCase\", \"useGETForQueries\", \"includeUnusedVariables\"]);\n\n  if (__DEV__) {\n    checkFetcher(preferredFetch || backupFetch);\n  }\n\n  var linkConfig = {\n    http: {\n      includeExtensions: includeExtensions,\n      preserveHeaderCase: preserveHeaderCase\n    },\n    options: requestOptions.fetchOptions,\n    credentials: requestOptions.credentials,\n    headers: requestOptions.headers\n  };\n  return new ApolloLink(function (operation) {\n    var chosenURI = selectURI(operation, uri);\n    var context = operation.getContext();\n    var clientAwarenessHeaders = {};\n\n    if (context.clientAwareness) {\n      var _a = context.clientAwareness,\n          name_1 = _a.name,\n          version = _a.version;\n\n      if (name_1) {\n        clientAwarenessHeaders['apollographql-client-name'] = name_1;\n      }\n\n      if (version) {\n        clientAwarenessHeaders['apollographql-client-version'] = version;\n      }\n    }\n\n    var contextHeaders = __assign(__assign({}, clientAwarenessHeaders), context.headers);\n\n    var contextConfig = {\n      http: context.http,\n      options: context.fetchOptions,\n      credentials: context.credentials,\n      headers: contextHeaders\n    };\n\n    var _b = selectHttpOptionsAndBodyInternal(operation, print, fallbackHttpConfig, linkConfig, contextConfig),\n        options = _b.options,\n        body = _b.body;\n\n    if (body.variables && !includeUnusedVariables) {\n      var unusedNames_1 = new Set(Object.keys(body.variables));\n      visit(operation.query, {\n        Variable: function (node, _key, parent) {\n          if (parent && parent.kind !== 'VariableDefinition') {\n            unusedNames_1.delete(node.name.value);\n          }\n        }\n      });\n\n      if (unusedNames_1.size) {\n        body.variables = __assign({}, body.variables);\n        unusedNames_1.forEach(function (name) {\n          delete body.variables[name];\n        });\n      }\n    }\n\n    var controller;\n\n    if (!options.signal) {\n      var _c = createSignalIfSupported(),\n          _controller = _c.controller,\n          signal = _c.signal;\n\n      controller = _controller;\n      if (controller) options.signal = signal;\n    }\n\n    var definitionIsMutation = function (d) {\n      return d.kind === 'OperationDefinition' && d.operation === 'mutation';\n    };\n\n    if (useGETForQueries && !operation.query.definitions.some(definitionIsMutation)) {\n      options.method = 'GET';\n    }\n\n    if (hasDirectives(['defer'], operation.query)) {\n      options.headers.accept = \"multipart/mixed; deferSpec=20220824, application/json\";\n    }\n\n    if (options.method === 'GET') {\n      var _d = rewriteURIForGET(chosenURI, body),\n          newURI = _d.newURI,\n          parseError = _d.parseError;\n\n      if (parseError) {\n        return fromError(parseError);\n      }\n\n      chosenURI = newURI;\n    } else {\n      try {\n        options.body = serializeFetchParameter(body, 'Payload');\n      } catch (parseError) {\n        return fromError(parseError);\n      }\n    }\n\n    return new Observable(function (observer) {\n      var currentFetch = preferredFetch || maybe(function () {\n        return fetch;\n      }) || backupFetch;\n      currentFetch(chosenURI, options).then(function (response) {\n        var _a;\n\n        operation.setContext({\n          response: response\n        });\n        var ctype = (_a = response.headers) === null || _a === void 0 ? void 0 : _a.get('content-type');\n\n        if (ctype !== null && /^multipart\\/mixed/i.test(ctype)) {\n          return readMultipartBody(response, observer);\n        } else {\n          return readJsonBody(response, operation, observer);\n        }\n      }).catch(function (err) {\n        return handleError(err, observer);\n      });\n      return function () {\n        if (controller) controller.abort();\n      };\n    });\n  });\n};","map":{"version":3,"mappings":"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","names":["visit","ApolloLink","Observable","hasDirectives","serializeFetchParameter","selectURI","handleError","readMultipartBody","readJsonBody","checkFetcher","selectHttpOptionsAndBodyInternal","defaultPrinter","fallbackHttpConfig","createSignalIfSupported","rewriteURIForGET","fromError","maybe","backupFetch","createHttpLink","linkOptions","_a","preferredFetch","_b","print","includeExtensions","preserveHeaderCase","useGETForQueries","_c","includeUnusedVariables","requestOptions","__DEV__","linkConfig","http","options","fetchOptions","credentials","headers","chosenURI","operation","uri","context","getContext","clientAwarenessHeaders","clientAwareness","name_1","version","contextHeaders","contextConfig","body","variables","unusedNames_1","Set","Object","keys","query","Variable","node","_key","parent","kind","delete","name","value","size","__assign","forEach","controller","signal","_controller","definitionIsMutation","d","definitions","some","method","accept","newURI","parseError","currentFetch","then","setContext","response","ctype","get","test","observer","catch","err","abort"],"sources":["/Users/kulta/Code/part6/graphql-phonebook-frontend/node_modules/@apollo/src/link/http/createHttpLink.ts"],"sourcesContent":["import '../../utilities/globals';\n\nimport { visit, DefinitionNode, VariableDefinitionNode } from 'graphql';\n\nimport { ApolloLink } from '../core';\nimport { Observable, hasDirectives } from '../../utilities';\nimport { serializeFetchParameter } from './serializeFetchParameter';\nimport { selectURI } from './selectURI';\nimport {\n  handleError,\n  readMultipartBody,\n  readJsonBody\n} from './parseAndCheckHttpResponse';\nimport { checkFetcher } from './checkFetcher';\nimport {\n  selectHttpOptionsAndBodyInternal,\n  defaultPrinter,\n  fallbackHttpConfig,\n  HttpOptions\n} from './selectHttpOptionsAndBody';\nimport { createSignalIfSupported } from './createSignalIfSupported';\nimport { rewriteURIForGET } from './rewriteURIForGET';\nimport { fromError } from '../utils';\nimport { maybe } from '../../utilities';\n\nconst backupFetch = maybe(() => fetch);\n\nexport const createHttpLink = (linkOptions: HttpOptions = {}) => {\n  let {\n    uri = '/graphql',\n    // use default global fetch if nothing passed in\n    fetch: preferredFetch,\n    print = defaultPrinter,\n    includeExtensions,\n    preserveHeaderCase,\n    useGETForQueries,\n    includeUnusedVariables = false,\n    ...requestOptions\n  } = linkOptions;\n\n  if (__DEV__) {\n    // Make sure at least one of preferredFetch, window.fetch, or backupFetch is\n    // defined, so requests won't fail at runtime.\n    checkFetcher(preferredFetch || backupFetch);\n  }\n\n  const linkConfig = {\n    http: { includeExtensions, preserveHeaderCase },\n    options: requestOptions.fetchOptions,\n    credentials: requestOptions.credentials,\n    headers: requestOptions.headers,\n  };\n\n  return new ApolloLink(operation => {\n    let chosenURI = selectURI(operation, uri);\n\n    const context = operation.getContext();\n\n    // `apollographql-client-*` headers are automatically set if a\n    // `clientAwareness` object is found in the context. These headers are\n    // set first, followed by the rest of the headers pulled from\n    // `context.headers`. If desired, `apollographql-client-*` headers set by\n    // the `clientAwareness` object can be overridden by\n    // `apollographql-client-*` headers set in `context.headers`.\n    const clientAwarenessHeaders: {\n      'apollographql-client-name'?: string;\n      'apollographql-client-version'?: string;\n    } = {};\n\n    if (context.clientAwareness) {\n      const { name, version } = context.clientAwareness;\n      if (name) {\n        clientAwarenessHeaders['apollographql-client-name'] = name;\n      }\n      if (version) {\n        clientAwarenessHeaders['apollographql-client-version'] = version;\n      }\n    }\n\n    const contextHeaders = { ...clientAwarenessHeaders, ...context.headers };\n\n    const contextConfig = {\n      http: context.http,\n      options: context.fetchOptions,\n      credentials: context.credentials,\n      headers: contextHeaders,\n    };\n\n    //uses fallback, link, and then context to build options\n    const { options, body } = selectHttpOptionsAndBodyInternal(\n      operation,\n      print,\n      fallbackHttpConfig,\n      linkConfig,\n      contextConfig,\n    );\n\n    if (body.variables && !includeUnusedVariables) {\n      const unusedNames = new Set(Object.keys(body.variables));\n      visit(operation.query, {\n        Variable(node, _key, parent) {\n          // A variable type definition at the top level of a query is not\n          // enough to silence server-side errors about the variable being\n          // unused, so variable definitions do not count as usage.\n          // https://spec.graphql.org/draft/#sec-All-Variables-Used\n          if (parent && (parent as VariableDefinitionNode).kind !== 'VariableDefinition') {\n            unusedNames.delete(node.name.value);\n          }\n        },\n      });\n      if (unusedNames.size) {\n        // Make a shallow copy of body.variables (with keys in the same\n        // order) and then delete unused variables from the copy.\n        body.variables = { ...body.variables };\n        unusedNames.forEach(name => {\n          delete body.variables![name];\n        });\n      }\n    }\n\n    let controller: any;\n    if (!(options as any).signal) {\n      const { controller: _controller, signal } = createSignalIfSupported();\n      controller = _controller;\n      if (controller) (options as any).signal = signal;\n    }\n\n    // If requested, set method to GET if there are no mutations.\n    const definitionIsMutation = (d: DefinitionNode) => {\n      return d.kind === 'OperationDefinition' && d.operation === 'mutation';\n    };\n    if (\n      useGETForQueries &&\n      !operation.query.definitions.some(definitionIsMutation)\n    ) {\n      options.method = 'GET';\n    }\n\n    // does not match custom directives beginning with @defer\n    if (hasDirectives(['defer'], operation.query)) {\n      options.headers.accept = \"multipart/mixed; deferSpec=20220824, application/json\";\n    }\n\n    if (options.method === 'GET') {\n      const { newURI, parseError } = rewriteURIForGET(chosenURI, body);\n      if (parseError) {\n        return fromError(parseError);\n      }\n      chosenURI = newURI;\n    } else {\n      try {\n        (options as any).body = serializeFetchParameter(body, 'Payload');\n      } catch (parseError) {\n        return fromError(parseError);\n      }\n    }\n\n    return new Observable(observer => {\n      // Prefer linkOptions.fetch (preferredFetch) if provided, and otherwise\n      // fall back to the *current* global window.fetch function (see issue\n      // #7832), or (if all else fails) the backupFetch function we saved when\n      // this module was first evaluated. This last option protects against the\n      // removal of window.fetch, which is unlikely but not impossible.\n      const currentFetch = preferredFetch || maybe(() => fetch) || backupFetch;\n\n      currentFetch!(chosenURI, options)\n        .then(response => {\n          operation.setContext({ response });\n          const ctype = response.headers?.get('content-type');\n\n          if (ctype !== null && /^multipart\\/mixed/i.test(ctype)) {\n            return readMultipartBody(response, observer);\n          } else {\n            return readJsonBody(response, operation, observer);\n          }\n        })\n        .catch(err => handleError(err, observer));\n\n      return () => {\n        // XXX support canceling this request\n        // https://developers.google.com/web/updates/2017/09/abortable-fetch\n        if (controller) controller.abort();\n      };\n    });\n  });\n};\n"]},"metadata":{},"sourceType":"module"}