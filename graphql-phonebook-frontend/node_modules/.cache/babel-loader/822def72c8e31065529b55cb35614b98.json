{"ast":null,"code":"import { __awaiter, __generator } from \"tslib\";\nimport { responseIterator } from \"./responseIterator.js\";\nimport { throwServerError } from \"../utils/index.js\";\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nexport function readMultipartBody(response, observer) {\n  var _a, _b, _c;\n\n  return __awaiter(this, void 0, void 0, function () {\n    var decoder, contentType, delimiter, boundaryVal, boundary, buffer, iterator, running, _d, value, done, chunk, bi, message, i, headers, contentType_1, body, result;\n\n    var _e;\n\n    return __generator(this, function (_f) {\n      switch (_f.label) {\n        case 0:\n          if (TextDecoder === undefined) {\n            throw new Error(\"TextDecoder must be defined in the environment: please import a polyfill.\");\n          }\n\n          decoder = new TextDecoder(\"utf-8\");\n          contentType = (_a = response.headers) === null || _a === void 0 ? void 0 : _a.get('content-type');\n          delimiter = \"boundary=\";\n          boundaryVal = (contentType === null || contentType === void 0 ? void 0 : contentType.includes(delimiter)) ? contentType === null || contentType === void 0 ? void 0 : contentType.substring((contentType === null || contentType === void 0 ? void 0 : contentType.indexOf(delimiter)) + delimiter.length).replace(/['\"]/g, \"\").replace(/\\;(.*)/gm, \"\").trim() : \"-\";\n          boundary = \"--\".concat(boundaryVal);\n          buffer = \"\";\n          iterator = responseIterator(response);\n          running = true;\n          _f.label = 1;\n\n        case 1:\n          if (!running) return [3, 3];\n          return [4, iterator.next()];\n\n        case 2:\n          _d = _f.sent(), value = _d.value, done = _d.done;\n          chunk = typeof value === \"string\" ? value : decoder.decode(value);\n          running = !done;\n          buffer += chunk;\n          bi = buffer.indexOf(boundary);\n\n          while (bi > -1) {\n            message = void 0;\n            _e = [buffer.slice(0, bi), buffer.slice(bi + boundary.length)], message = _e[0], buffer = _e[1];\n\n            if (message.trim()) {\n              i = message.indexOf(\"\\r\\n\\r\\n\");\n              headers = parseHeaders(message.slice(0, i));\n              contentType_1 = headers[\"content-type\"];\n\n              if (contentType_1 && contentType_1.toLowerCase().indexOf(\"application/json\") === -1) {\n                throw new Error(\"Unsupported patch content type: application/json is required.\");\n              }\n\n              body = message.slice(i);\n\n              try {\n                result = parseJsonBody(response, body.replace(\"\\r\\n\", \"\"));\n\n                if (Object.keys(result).length > 1 || \"data\" in result || \"incremental\" in result || \"errors\" in result) {\n                  (_b = observer.next) === null || _b === void 0 ? void 0 : _b.call(observer, result);\n                }\n              } catch (err) {\n                handleError(err, observer);\n              }\n            }\n\n            bi = buffer.indexOf(boundary);\n          }\n\n          return [3, 1];\n\n        case 3:\n          (_c = observer.complete) === null || _c === void 0 ? void 0 : _c.call(observer);\n          return [2];\n      }\n    });\n  });\n}\nexport function parseHeaders(headerText) {\n  var headersInit = {};\n  headerText.split(\"\\n\").forEach(function (line) {\n    var i = line.indexOf(\":\");\n\n    if (i > -1) {\n      var name_1 = line.slice(0, i).trim().toLowerCase();\n      var value = line.slice(i + 1).trim();\n      headersInit[name_1] = value;\n    }\n  });\n  return headersInit;\n}\nexport function parseJsonBody(response, bodyText) {\n  if (response.status >= 300) {\n    var getResult = function () {\n      try {\n        return JSON.parse(bodyText);\n      } catch (err) {\n        return bodyText;\n      }\n    };\n\n    throwServerError(response, getResult(), \"Response not successful: Received status code \".concat(response.status));\n  }\n\n  try {\n    return JSON.parse(bodyText);\n  } catch (err) {\n    var parseError = err;\n    parseError.name = \"ServerParseError\";\n    parseError.response = response;\n    parseError.statusCode = response.status;\n    parseError.bodyText = bodyText;\n    throw parseError;\n  }\n}\nexport function handleError(err, observer) {\n  var _a, _b;\n\n  if (err.name === \"AbortError\") return;\n\n  if (err.result && err.result.errors && err.result.data) {\n    (_a = observer.next) === null || _a === void 0 ? void 0 : _a.call(observer, err.result);\n  }\n\n  (_b = observer.error) === null || _b === void 0 ? void 0 : _b.call(observer, err);\n}\nexport function readJsonBody(response, operation, observer) {\n  parseAndCheckHttpResponse(operation)(response).then(function (result) {\n    var _a, _b;\n\n    (_a = observer.next) === null || _a === void 0 ? void 0 : _a.call(observer, result);\n    (_b = observer.complete) === null || _b === void 0 ? void 0 : _b.call(observer);\n  }).catch(function (err) {\n    return handleError(err, observer);\n  });\n}\nexport function parseAndCheckHttpResponse(operations) {\n  return function (response) {\n    return response.text().then(function (bodyText) {\n      return parseJsonBody(response, bodyText);\n    }).then(function (result) {\n      if (response.status >= 300) {\n        throwServerError(response, result, \"Response not successful: Received status code \".concat(response.status));\n      }\n\n      if (!Array.isArray(result) && !hasOwnProperty.call(result, \"data\") && !hasOwnProperty.call(result, \"errors\")) {\n        throwServerError(response, result, \"Server response was missing for query '\".concat(Array.isArray(operations) ? operations.map(function (op) {\n          return op.operationName;\n        }) : operations.operationName, \"'.\"));\n      }\n\n      return result;\n    });\n  };\n}","map":{"version":3,"mappings":"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","names":["responseIterator","throwServerError","Object","prototype","hasOwnProperty","readMultipartBody","response","observer","TextDecoder","undefined","Error","decoder","contentType","headers","_a","get","delimiter","boundaryVal","includes","substring","indexOf","length","replace","trim","boundary","buffer","iterator","running","next","_d","_f","value","done","chunk","decode","bi","message","_e","slice","i","parseHeaders","contentType_1","toLowerCase","body","result","parseJsonBody","keys","_b","err","handleError","complete","_c","headerText","headersInit","split","forEach","line","name_1","bodyText","status","getResult","JSON","parse","parseError","name","statusCode","errors","data","error","readJsonBody","operation","parseAndCheckHttpResponse","then","catch","operations","text","Array","isArray","call","map","op","operationName"],"sources":["/Users/kulta/Code/part6/graphql-phonebook-frontend/node_modules/@apollo/src/link/http/parseAndCheckHttpResponse.ts"],"sourcesContent":["import { responseIterator } from \"./responseIterator\";\nimport { Operation } from \"../core\";\nimport { throwServerError } from \"../utils\";\nimport { Observer } from \"../../utilities\";\n\nconst { hasOwnProperty } = Object.prototype;\n\nexport type ServerParseError = Error & {\n  response: Response;\n  statusCode: number;\n  bodyText: string;\n};\n\nexport async function readMultipartBody<T = Record<string, unknown>>(\n  response: Response,\n  observer: Observer<T>\n) {\n  if (TextDecoder === undefined) {\n    throw new Error(\n      \"TextDecoder must be defined in the environment: please import a polyfill.\"\n    );\n  }\n  const decoder = new TextDecoder(\"utf-8\");\n  const contentType = response.headers?.get('content-type');\n  const delimiter = \"boundary=\";\n\n  // parse boundary value and ignore any subsequent name/value pairs after ;\n  // https://www.rfc-editor.org/rfc/rfc9110.html#name-parameters\n  // e.g. multipart/mixed;boundary=\"graphql\";deferSpec=20220824\n  // if no boundary is specified, default to -\n  const boundaryVal = contentType?.includes(delimiter)\n    ? contentType\n        ?.substring(contentType?.indexOf(delimiter) + delimiter.length)\n        .replace(/['\"]/g, \"\")\n        .replace(/\\;(.*)/gm, \"\")\n        .trim()\n    : \"-\";\n\n  let boundary = `--${boundaryVal}`;\n  let buffer = \"\";\n  const iterator = responseIterator(response);\n  let running = true;\n\n  while (running) {\n    const { value, done } = await iterator.next();\n    const chunk = typeof value === \"string\" ? value : decoder.decode(value);\n    running = !done;\n    buffer += chunk;\n    let bi = buffer.indexOf(boundary);\n\n    while (bi > -1) {\n      let message: string;\n      [message, buffer] = [\n        buffer.slice(0, bi),\n        buffer.slice(bi + boundary.length),\n      ];\n      if (message.trim()) {\n        const i = message.indexOf(\"\\r\\n\\r\\n\");\n        const headers = parseHeaders(message.slice(0, i));\n        const contentType = headers[\"content-type\"];\n        if (\n          contentType &&\n          contentType.toLowerCase().indexOf(\"application/json\") === -1\n        ) {\n          throw new Error(\"Unsupported patch content type: application/json is required.\");\n        }\n        const body = message.slice(i);\n\n        try {\n          const result = parseJsonBody<T>(response, body.replace(\"\\r\\n\", \"\"));\n          if (\n            Object.keys(result).length > 1 ||\n            \"data\" in result ||\n            \"incremental\" in result ||\n            \"errors\" in result\n          ) {\n            // for the last chunk with only `hasNext: false`,\n            // we don't need to call observer.next as there is no data/errors\n            observer.next?.(result);\n          }\n        } catch (err) {\n          handleError(err, observer);\n        }\n      }\n      bi = buffer.indexOf(boundary);\n    }\n  }\n  observer.complete?.();\n}\n\nexport function parseHeaders(headerText: string): Record<string, string> {\n  const headersInit: Record<string, string> = {};\n  headerText.split(\"\\n\").forEach((line) => {\n    const i = line.indexOf(\":\");\n    if (i > -1) {\n      // normalize headers to lowercase\n      const name = line.slice(0, i).trim().toLowerCase();\n      const value = line.slice(i + 1).trim();\n      headersInit[name] = value;\n    }\n  });\n  return headersInit;\n}\n\nexport function parseJsonBody<T>(response: Response, bodyText: string): T {\n  if (response.status >= 300) {\n    // Network error\n    const getResult = () => {\n      try {\n        return JSON.parse(bodyText);\n      } catch (err) {\n        return bodyText\n      }\n    }\n    throwServerError(\n      response,\n      getResult(),\n      `Response not successful: Received status code ${response.status}`,\n    );\n  }\n\n  try {\n    return JSON.parse(bodyText) as T;\n  } catch (err) {\n    const parseError = err as ServerParseError;\n    parseError.name = \"ServerParseError\";\n    parseError.response = response;\n    parseError.statusCode = response.status;\n    parseError.bodyText = bodyText;\n    throw parseError;\n  }\n}\n\nexport function handleError(err: any, observer: Observer<any>) {\n  if (err.name === \"AbortError\") return;\n  // if it is a network error, BUT there is graphql result info fire\n  // the next observer before calling error this gives apollo-client\n  // (and react-apollo) the `graphqlErrors` and `networkErrors` to\n  // pass to UI this should only happen if we *also* have data as\n  // part of the response key per the spec\n  if (err.result && err.result.errors && err.result.data) {\n    // if we don't call next, the UI can only show networkError\n    // because AC didn't get any graphqlErrors this is graphql\n    // execution result info (i.e errors and possibly data) this is\n    // because there is no formal spec how errors should translate to\n    // http status codes. So an auth error (401) could have both data\n    // from a public field, errors from a private field, and a status\n    // of 401\n    // {\n    //  user { // this will have errors\n    //    firstName\n    //  }\n    //  products { // this is public so will have data\n    //    cost\n    //  }\n    // }\n    //\n    // the result of above *could* look like this:\n    // {\n    //   data: { products: [{ cost: \"$10\" }] },\n    //   errors: [{\n    //      message: 'your session has timed out',\n    //      path: []\n    //   }]\n    // }\n    // status code of above would be a 401\n    // in the UI you want to show data where you can, errors as data where you can\n    // and use correct http status codes\n    observer.next?.(err.result);\n  }\n\n  observer.error?.(err);\n}\n\nexport function readJsonBody<T = Record<string, unknown>>(\n  response: Response,\n  operation: Operation,\n  observer: Observer<T>\n) {\n  parseAndCheckHttpResponse(operation)(response)\n    .then((result) => {\n      observer.next?.(result);\n      observer.complete?.();\n    })\n    .catch((err) => handleError(err, observer));\n}\n\nexport function parseAndCheckHttpResponse(operations: Operation | Operation[]) {\n  return (response: Response) =>\n    response\n      .text()\n      .then((bodyText) => parseJsonBody(response, bodyText))\n      .then((result: any) => {\n        if (response.status >= 300) {\n          // Network error\n          throwServerError(\n            response,\n            result,\n            `Response not successful: Received status code ${response.status}`\n          );\n        }\n        if (\n          !Array.isArray(result) &&\n          !hasOwnProperty.call(result, \"data\") &&\n          !hasOwnProperty.call(result, \"errors\")\n        ) {\n          // Data error\n          throwServerError(\n            response,\n            result,\n            `Server response was missing for query '${\n              Array.isArray(operations)\n                ? operations.map((op) => op.operationName)\n                : operations.operationName\n            }'.`\n          );\n        }\n        return result;\n      });\n}\n"]},"metadata":{},"sourceType":"module"}