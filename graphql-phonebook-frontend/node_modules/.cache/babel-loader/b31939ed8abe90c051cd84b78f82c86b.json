{"ast":null,"code":"import { didYouMean } from '../../jsutils/didYouMean.mjs';\nimport { inspect } from '../../jsutils/inspect.mjs';\nimport { invariant } from '../../jsutils/invariant.mjs';\nimport { suggestionList } from '../../jsutils/suggestionList.mjs';\nimport { GraphQLError } from '../../error/GraphQLError.mjs';\nimport { Kind } from '../../language/kinds.mjs';\nimport { isTypeDefinitionNode } from '../../language/predicates.mjs';\nimport { isEnumType, isInputObjectType, isInterfaceType, isObjectType, isScalarType, isUnionType } from '../../type/definition.mjs';\n/**\n * Possible type extension\n *\n * A type extension is only valid if the type is defined and has the same kind.\n */\n\nexport function PossibleTypeExtensionsRule(context) {\n  const schema = context.getSchema();\n  const definedTypes = Object.create(null);\n\n  for (const def of context.getDocument().definitions) {\n    if (isTypeDefinitionNode(def)) {\n      definedTypes[def.name.value] = def;\n    }\n  }\n\n  return {\n    ScalarTypeExtension: checkExtension,\n    ObjectTypeExtension: checkExtension,\n    InterfaceTypeExtension: checkExtension,\n    UnionTypeExtension: checkExtension,\n    EnumTypeExtension: checkExtension,\n    InputObjectTypeExtension: checkExtension\n  };\n\n  function checkExtension(node) {\n    const typeName = node.name.value;\n    const defNode = definedTypes[typeName];\n    const existingType = schema === null || schema === void 0 ? void 0 : schema.getType(typeName);\n    let expectedKind;\n\n    if (defNode) {\n      expectedKind = defKindToExtKind[defNode.kind];\n    } else if (existingType) {\n      expectedKind = typeToExtKind(existingType);\n    }\n\n    if (expectedKind) {\n      if (expectedKind !== node.kind) {\n        const kindStr = extensionKindToTypeName(node.kind);\n        context.reportError(new GraphQLError(`Cannot extend non-${kindStr} type \"${typeName}\".`, {\n          nodes: defNode ? [defNode, node] : node\n        }));\n      }\n    } else {\n      const allTypeNames = Object.keys({ ...definedTypes,\n        ...(schema === null || schema === void 0 ? void 0 : schema.getTypeMap())\n      });\n      const suggestedTypes = suggestionList(typeName, allTypeNames);\n      context.reportError(new GraphQLError(`Cannot extend type \"${typeName}\" because it is not defined.` + didYouMean(suggestedTypes), {\n        nodes: node.name\n      }));\n    }\n  }\n}\nconst defKindToExtKind = {\n  [Kind.SCALAR_TYPE_DEFINITION]: Kind.SCALAR_TYPE_EXTENSION,\n  [Kind.OBJECT_TYPE_DEFINITION]: Kind.OBJECT_TYPE_EXTENSION,\n  [Kind.INTERFACE_TYPE_DEFINITION]: Kind.INTERFACE_TYPE_EXTENSION,\n  [Kind.UNION_TYPE_DEFINITION]: Kind.UNION_TYPE_EXTENSION,\n  [Kind.ENUM_TYPE_DEFINITION]: Kind.ENUM_TYPE_EXTENSION,\n  [Kind.INPUT_OBJECT_TYPE_DEFINITION]: Kind.INPUT_OBJECT_TYPE_EXTENSION\n};\n\nfunction typeToExtKind(type) {\n  if (isScalarType(type)) {\n    return Kind.SCALAR_TYPE_EXTENSION;\n  }\n\n  if (isObjectType(type)) {\n    return Kind.OBJECT_TYPE_EXTENSION;\n  }\n\n  if (isInterfaceType(type)) {\n    return Kind.INTERFACE_TYPE_EXTENSION;\n  }\n\n  if (isUnionType(type)) {\n    return Kind.UNION_TYPE_EXTENSION;\n  }\n\n  if (isEnumType(type)) {\n    return Kind.ENUM_TYPE_EXTENSION;\n  }\n\n  if (isInputObjectType(type)) {\n    return Kind.INPUT_OBJECT_TYPE_EXTENSION;\n  }\n  /* c8 ignore next 3 */\n  // Not reachable. All possible types have been considered\n\n\n  false || invariant(false, 'Unexpected type: ' + inspect(type));\n}\n\nfunction extensionKindToTypeName(kind) {\n  switch (kind) {\n    case Kind.SCALAR_TYPE_EXTENSION:\n      return 'scalar';\n\n    case Kind.OBJECT_TYPE_EXTENSION:\n      return 'object';\n\n    case Kind.INTERFACE_TYPE_EXTENSION:\n      return 'interface';\n\n    case Kind.UNION_TYPE_EXTENSION:\n      return 'union';\n\n    case Kind.ENUM_TYPE_EXTENSION:\n      return 'enum';\n\n    case Kind.INPUT_OBJECT_TYPE_EXTENSION:\n      return 'input object';\n    // Not reachable. All possible types have been considered\n\n    /* c8 ignore next */\n\n    default:\n      false || invariant(false, 'Unexpected kind: ' + inspect(kind));\n  }\n}","map":{"version":3,"sources":["/Users/kulta/Code/part6/graphql-phonebook-frontend/node_modules/graphql/validation/rules/PossibleTypeExtensionsRule.mjs"],"names":["didYouMean","inspect","invariant","suggestionList","GraphQLError","Kind","isTypeDefinitionNode","isEnumType","isInputObjectType","isInterfaceType","isObjectType","isScalarType","isUnionType","PossibleTypeExtensionsRule","context","schema","getSchema","definedTypes","Object","create","def","getDocument","definitions","name","value","ScalarTypeExtension","checkExtension","ObjectTypeExtension","InterfaceTypeExtension","UnionTypeExtension","EnumTypeExtension","InputObjectTypeExtension","node","typeName","defNode","existingType","getType","expectedKind","defKindToExtKind","kind","typeToExtKind","kindStr","extensionKindToTypeName","reportError","nodes","allTypeNames","keys","getTypeMap","suggestedTypes","SCALAR_TYPE_DEFINITION","SCALAR_TYPE_EXTENSION","OBJECT_TYPE_DEFINITION","OBJECT_TYPE_EXTENSION","INTERFACE_TYPE_DEFINITION","INTERFACE_TYPE_EXTENSION","UNION_TYPE_DEFINITION","UNION_TYPE_EXTENSION","ENUM_TYPE_DEFINITION","ENUM_TYPE_EXTENSION","INPUT_OBJECT_TYPE_DEFINITION","INPUT_OBJECT_TYPE_EXTENSION","type"],"mappings":"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","sourcesContent":["import { didYouMean } from '../../jsutils/didYouMean.mjs';\nimport { inspect } from '../../jsutils/inspect.mjs';\nimport { invariant } from '../../jsutils/invariant.mjs';\nimport { suggestionList } from '../../jsutils/suggestionList.mjs';\nimport { GraphQLError } from '../../error/GraphQLError.mjs';\nimport { Kind } from '../../language/kinds.mjs';\nimport { isTypeDefinitionNode } from '../../language/predicates.mjs';\nimport {\n  isEnumType,\n  isInputObjectType,\n  isInterfaceType,\n  isObjectType,\n  isScalarType,\n  isUnionType,\n} from '../../type/definition.mjs';\n\n/**\n * Possible type extension\n *\n * A type extension is only valid if the type is defined and has the same kind.\n */\nexport function PossibleTypeExtensionsRule(context) {\n  const schema = context.getSchema();\n  const definedTypes = Object.create(null);\n\n  for (const def of context.getDocument().definitions) {\n    if (isTypeDefinitionNode(def)) {\n      definedTypes[def.name.value] = def;\n    }\n  }\n\n  return {\n    ScalarTypeExtension: checkExtension,\n    ObjectTypeExtension: checkExtension,\n    InterfaceTypeExtension: checkExtension,\n    UnionTypeExtension: checkExtension,\n    EnumTypeExtension: checkExtension,\n    InputObjectTypeExtension: checkExtension,\n  };\n\n  function checkExtension(node) {\n    const typeName = node.name.value;\n    const defNode = definedTypes[typeName];\n    const existingType =\n      schema === null || schema === void 0 ? void 0 : schema.getType(typeName);\n    let expectedKind;\n\n    if (defNode) {\n      expectedKind = defKindToExtKind[defNode.kind];\n    } else if (existingType) {\n      expectedKind = typeToExtKind(existingType);\n    }\n\n    if (expectedKind) {\n      if (expectedKind !== node.kind) {\n        const kindStr = extensionKindToTypeName(node.kind);\n        context.reportError(\n          new GraphQLError(`Cannot extend non-${kindStr} type \"${typeName}\".`, {\n            nodes: defNode ? [defNode, node] : node,\n          }),\n        );\n      }\n    } else {\n      const allTypeNames = Object.keys({\n        ...definedTypes,\n        ...(schema === null || schema === void 0\n          ? void 0\n          : schema.getTypeMap()),\n      });\n      const suggestedTypes = suggestionList(typeName, allTypeNames);\n      context.reportError(\n        new GraphQLError(\n          `Cannot extend type \"${typeName}\" because it is not defined.` +\n            didYouMean(suggestedTypes),\n          {\n            nodes: node.name,\n          },\n        ),\n      );\n    }\n  }\n}\nconst defKindToExtKind = {\n  [Kind.SCALAR_TYPE_DEFINITION]: Kind.SCALAR_TYPE_EXTENSION,\n  [Kind.OBJECT_TYPE_DEFINITION]: Kind.OBJECT_TYPE_EXTENSION,\n  [Kind.INTERFACE_TYPE_DEFINITION]: Kind.INTERFACE_TYPE_EXTENSION,\n  [Kind.UNION_TYPE_DEFINITION]: Kind.UNION_TYPE_EXTENSION,\n  [Kind.ENUM_TYPE_DEFINITION]: Kind.ENUM_TYPE_EXTENSION,\n  [Kind.INPUT_OBJECT_TYPE_DEFINITION]: Kind.INPUT_OBJECT_TYPE_EXTENSION,\n};\n\nfunction typeToExtKind(type) {\n  if (isScalarType(type)) {\n    return Kind.SCALAR_TYPE_EXTENSION;\n  }\n\n  if (isObjectType(type)) {\n    return Kind.OBJECT_TYPE_EXTENSION;\n  }\n\n  if (isInterfaceType(type)) {\n    return Kind.INTERFACE_TYPE_EXTENSION;\n  }\n\n  if (isUnionType(type)) {\n    return Kind.UNION_TYPE_EXTENSION;\n  }\n\n  if (isEnumType(type)) {\n    return Kind.ENUM_TYPE_EXTENSION;\n  }\n\n  if (isInputObjectType(type)) {\n    return Kind.INPUT_OBJECT_TYPE_EXTENSION;\n  }\n  /* c8 ignore next 3 */\n  // Not reachable. All possible types have been considered\n\n  false || invariant(false, 'Unexpected type: ' + inspect(type));\n}\n\nfunction extensionKindToTypeName(kind) {\n  switch (kind) {\n    case Kind.SCALAR_TYPE_EXTENSION:\n      return 'scalar';\n\n    case Kind.OBJECT_TYPE_EXTENSION:\n      return 'object';\n\n    case Kind.INTERFACE_TYPE_EXTENSION:\n      return 'interface';\n\n    case Kind.UNION_TYPE_EXTENSION:\n      return 'union';\n\n    case Kind.ENUM_TYPE_EXTENSION:\n      return 'enum';\n\n    case Kind.INPUT_OBJECT_TYPE_EXTENSION:\n      return 'input object';\n    // Not reachable. All possible types have been considered\n\n    /* c8 ignore next */\n\n    default:\n      false || invariant(false, 'Unexpected kind: ' + inspect(kind));\n  }\n}\n"]},"metadata":{},"sourceType":"module"}