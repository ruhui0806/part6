{"ast":null,"code":"var _jsxFileName = \"/Users/kulta/Code/part6/graphql-phonebook-frontend/src/components/Persons.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { gql, useQuery } from '@apollo/client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst FIND_PERSON = gql`\n    query findPersonByName($nameToSearch: String!) {\n        findPerson(name: $nameToSearch) {\n            id\n            name\n            phone\n            address {\n                street\n                city\n            }\n        }\n    }\n`;\n\nconst Person = _ref => {\n  let {\n    person,\n    onClose\n  } = _ref;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: person.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [person.address.street, \" \", person.address.city]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: person.phone\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: onClose,\n      children: \"close\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\n_c = Person;\n\nconst Persons = _ref2 => {\n  _s();\n\n  let {\n    persons\n  } = _ref2;\n  const [nameToSearch, setNameToSearch] = useState(null);\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(FIND_PERSON, {\n    variables: {\n      nameToSearch: nameToSearch\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: persons.map(p => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [' ', p.name, \" \", p.phone]\n    }, p.name, true, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 17\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Persons, \"xpFi7QCzQeZdE1kT/Me+Ax8tfhI=\", false, function () {\n  return [useQuery];\n});\n\n_c2 = Persons;\nexport default Persons;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Person\");\n$RefreshReg$(_c2, \"Persons\");","map":{"version":3,"sources":["/Users/kulta/Code/part6/graphql-phonebook-frontend/src/components/Persons.js"],"names":["React","useState","gql","useQuery","FIND_PERSON","Person","person","onClose","name","address","street","city","phone","Persons","persons","nameToSearch","setNameToSearch","loading","error","data","variables","map","p"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,GAAT,EAAcC,QAAd,QAA8B,gBAA9B;;;AAEA,MAAMC,WAAW,GAAGF,GAAI;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAZA;;AAcA,MAAMG,MAAM,GAAG,QAAyB;AAAA,MAAxB;AAAEC,IAAAA,MAAF;AAAUC,IAAAA;AAAV,GAAwB;AACpC,sBACI;AAAA,4BACI;AAAA,gBAAKD,MAAM,CAACE;AAAZ;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAA,iBACKF,MAAM,CAACG,OAAP,CAAeC,MADpB,OAC6BJ,MAAM,CAACG,OAAP,CAAeE,IAD5C;AAAA;AAAA;AAAA;AAAA;AAAA,YAFJ,eAKI;AAAA,gBAAML,MAAM,CAACM;AAAb;AAAA;AAAA;AAAA;AAAA,YALJ,eAMI;AAAQ,MAAA,OAAO,EAAEL,OAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YANJ;AAAA,kBADJ;AAUH,CAXD;;KAAMF,M;;AAaN,MAAMQ,OAAO,GAAG,SAAiB;AAAA;;AAAA,MAAhB;AAAEC,IAAAA;AAAF,GAAgB;AAC7B,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCf,QAAQ,CAAC,IAAD,CAAhD;AACA,QAAM;AAAEgB,IAAAA,OAAF;AAAWC,IAAAA,KAAX;AAAkBC,IAAAA;AAAlB,MAA2BhB,QAAQ,CAACC,WAAD,EAAc;AACnDgB,IAAAA,SAAS,EAAE;AAAEL,MAAAA,YAAY,EAAEA;AAAhB;AADwC,GAAd,CAAzC;AAGA,sBACI;AAAA,cACKD,OAAO,CAACO,GAAR,CAAaC,CAAD,iBACT;AAAA,iBACK,GADL,EAEKA,CAAC,CAACd,IAFP,OAEcc,CAAC,CAACV,KAFhB;AAAA,OAAUU,CAAC,CAACd,IAAZ;AAAA;AAAA;AAAA;AAAA,YADH;AADL;AAAA;AAAA;AAAA;AAAA,UADJ;AAUH,CAfD;;GAAMK,O;UAE+BV,Q;;;MAF/BU,O;AAiBN,eAAeA,OAAf","sourcesContent":["import React, { useState } from 'react'\nimport { gql, useQuery } from '@apollo/client'\n\nconst FIND_PERSON = gql`\n    query findPersonByName($nameToSearch: String!) {\n        findPerson(name: $nameToSearch) {\n            id\n            name\n            phone\n            address {\n                street\n                city\n            }\n        }\n    }\n`\n\nconst Person = ({ person, onClose }) => {\n    return (\n        <>\n            <h2>{person.name}</h2>\n            <div>\n                {person.address.street} {person.address.city}\n            </div>\n            <div>{person.phone}</div>\n            <button onClick={onClose}>close</button>\n        </>\n    )\n}\n\nconst Persons = ({ persons }) => {\n    const [nameToSearch, setNameToSearch] = useState(null)\n    const { loading, error, data } = useQuery(FIND_PERSON, {\n        variables: { nameToSearch: nameToSearch },\n    })\n    return (\n        <div>\n            {persons.map((p) => (\n                <div key={p.name}>\n                    {' '}\n                    {p.name} {p.phone}\n                </div>\n            ))}\n        </div>\n    )\n}\n\nexport default Persons\n"]},"metadata":{},"sourceType":"module"}