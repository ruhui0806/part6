{"ast":null,"code":"import { __assign, __spreadArray } from \"tslib\";\nimport { print } from 'graphql';\n;\nvar defaultHttpOptions = {\n  includeQuery: true,\n  includeExtensions: false,\n  preserveHeaderCase: false\n};\nvar defaultHeaders = {\n  accept: '*/*',\n  'content-type': 'application/json'\n};\nvar defaultOptions = {\n  method: 'POST'\n};\nexport var fallbackHttpConfig = {\n  http: defaultHttpOptions,\n  headers: defaultHeaders,\n  options: defaultOptions\n};\nexport var defaultPrinter = function (ast, printer) {\n  return printer(ast);\n};\nexport function selectHttpOptionsAndBody(operation, fallbackConfig) {\n  var configs = [];\n\n  for (var _i = 2; _i < arguments.length; _i++) {\n    configs[_i - 2] = arguments[_i];\n  }\n\n  configs.unshift(fallbackConfig);\n  return selectHttpOptionsAndBodyInternal.apply(void 0, __spreadArray([operation, defaultPrinter], configs, false));\n}\nexport function selectHttpOptionsAndBodyInternal(operation, printer) {\n  var configs = [];\n\n  for (var _i = 2; _i < arguments.length; _i++) {\n    configs[_i - 2] = arguments[_i];\n  }\n\n  var options = {};\n  var http = {};\n  configs.forEach(function (config) {\n    options = __assign(__assign(__assign({}, options), config.options), {\n      headers: __assign(__assign({}, options.headers), config.headers)\n    });\n\n    if (config.credentials) {\n      options.credentials = config.credentials;\n    }\n\n    http = __assign(__assign({}, http), config.http);\n  });\n  options.headers = removeDuplicateHeaders(options.headers, http.preserveHeaderCase);\n  var operationName = operation.operationName,\n      extensions = operation.extensions,\n      variables = operation.variables,\n      query = operation.query;\n  var body = {\n    operationName: operationName,\n    variables: variables\n  };\n  if (http.includeExtensions) body.extensions = extensions;\n  if (http.includeQuery) body.query = printer(query, print);\n  return {\n    options: options,\n    body: body\n  };\n}\n;\n\nfunction removeDuplicateHeaders(headers, preserveHeaderCase) {\n  if (!preserveHeaderCase) {\n    var normalizedHeaders_1 = Object.create(null);\n    Object.keys(Object(headers)).forEach(function (name) {\n      normalizedHeaders_1[name.toLowerCase()] = headers[name];\n    });\n    return normalizedHeaders_1;\n  }\n\n  var headerData = Object.create(null);\n  Object.keys(Object(headers)).forEach(function (name) {\n    headerData[name.toLowerCase()] = {\n      originalName: name,\n      value: headers[name]\n    };\n  });\n  var normalizedHeaders = Object.create(null);\n  Object.keys(headerData).forEach(function (name) {\n    normalizedHeaders[headerData[name].originalName] = headerData[name].value;\n  });\n  return normalizedHeaders;\n}","map":{"version":3,"mappings":"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","names":["print","defaultHttpOptions","includeQuery","includeExtensions","preserveHeaderCase","defaultHeaders","accept","defaultOptions","method","fallbackHttpConfig","http","headers","options","defaultPrinter","ast","printer","selectHttpOptionsAndBody","operation","fallbackConfig","configs","unshift","selectHttpOptionsAndBodyInternal","__spreadArray","forEach","config","credentials","removeDuplicateHeaders","extensions","variables","query","body","operationName","normalizedHeaders_1","Object","create","keys","name","toLowerCase","headerData","originalName","value","normalizedHeaders"],"sources":["/Users/kulta/Code/part6/graphql-phonebook-frontend/node_modules/@apollo/src/link/http/selectHttpOptionsAndBody.ts"],"sourcesContent":["import { ASTNode, print } from 'graphql';\n\nimport { Operation } from '../core';\n\nexport interface Printer {\n  (node: ASTNode, originalPrint: typeof print): string\n};\n\nexport interface UriFunction {\n  (operation: Operation): string;\n}\n\nexport interface Body {\n  query?: string;\n  operationName?: string;\n  variables?: Record<string, any>;\n  extensions?: Record<string, any>;\n}\n\nexport interface HttpOptions {\n  /**\n   * The URI to use when fetching operations.\n   *\n   * Defaults to '/graphql'.\n   */\n  uri?: string | UriFunction;\n\n  /**\n   * Passes the extensions field to your graphql server.\n   *\n   * Defaults to false.\n   */\n  includeExtensions?: boolean;\n\n  /**\n   * A `fetch`-compatible API to use when making requests.\n   */\n  fetch?: WindowOrWorkerGlobalScope['fetch'];\n\n  /**\n   * An object representing values to be sent as headers on the request.\n   */\n  headers?: any;\n\n  /**\n   * If set to true, header names won't be automatically normalized to \n   * lowercase. This allows for non-http-spec-compliant servers that might \n   * expect capitalized header names.\n   */\n  preserveHeaderCase?: boolean;\n\n  /**\n   * The credentials policy you want to use for the fetch call.\n   */\n  credentials?: string;\n\n  /**\n   * Any overrides of the fetch options argument to pass to the fetch call.\n   */\n  fetchOptions?: any;\n\n  /**\n   * If set to true, use the HTTP GET method for query operations. Mutations\n   * will still use the method specified in fetchOptions.method (which defaults\n   * to POST).\n   */\n  useGETForQueries?: boolean;\n\n  /**\n   * If set to true, the default behavior of stripping unused variables\n   * from the request will be disabled.\n   *\n   * Unused variables are likely to trigger server-side validation errors,\n   * per https://spec.graphql.org/draft/#sec-All-Variables-Used, but this\n   * includeUnusedVariables option can be useful if your server deviates\n   * from the GraphQL specification by not strictly enforcing that rule.\n   */\n  includeUnusedVariables?: boolean;\n  /**\n   * A function to substitute for the default query print function. Can be\n   * used to apply changes to the results of the print function.\n   */\n   print?: Printer;\n}\n\nexport interface HttpQueryOptions {\n  includeQuery?: boolean;\n  includeExtensions?: boolean;\n  preserveHeaderCase?: boolean;\n}\n\nexport interface HttpConfig {\n  http?: HttpQueryOptions;\n  options?: any;\n  headers?: any;\n  credentials?: any;\n}\n\nconst defaultHttpOptions: HttpQueryOptions = {\n  includeQuery: true,\n  includeExtensions: false,\n  preserveHeaderCase: false,\n};\n\nconst defaultHeaders = {\n  // headers are case insensitive (https://stackoverflow.com/a/5259004)\n  accept: '*/*',\n  // The content-type header describes the type of the body of the request, and\n  // so it typically only is sent with requests that actually have bodies. One\n  // could imagine that Apollo Client would remove this header when constructing\n  // a GET request (which has no body), but we historically have not done that.\n  // This means that browsers will preflight all Apollo Client requests (even\n  // GET requests). Apollo Server's CSRF prevention feature (introduced in\n  // AS3.7) takes advantage of this fact and does not block requests with this\n  // header. If you want to drop this header from GET requests, then you should\n  // probably replace it with a `apollo-require-preflight` header, or servers\n  // with CSRF prevention enabled might block your GET request. See\n  // https://www.apollographql.com/docs/apollo-server/security/cors/#preventing-cross-site-request-forgery-csrf\n  // for more details.\n  'content-type': 'application/json',\n};\n\nconst defaultOptions = {\n  method: 'POST',\n};\n\nexport const fallbackHttpConfig = {\n  http: defaultHttpOptions,\n  headers: defaultHeaders,\n  options: defaultOptions,\n};\n\nexport const defaultPrinter: Printer = (ast, printer) => printer(ast);\n\nexport function selectHttpOptionsAndBody(\n  operation: Operation,\n  fallbackConfig: HttpConfig,\n  ...configs: Array<HttpConfig>\n) {\n  configs.unshift(fallbackConfig);\n  return selectHttpOptionsAndBodyInternal(\n    operation,\n    defaultPrinter,\n    ...configs,\n  );\n}\n\nexport function selectHttpOptionsAndBodyInternal(\n  operation: Operation,\n  printer: Printer,\n  ...configs: HttpConfig[]\n) {\n  let options = {} as HttpConfig & Record<string, any>;\n  let http = {} as HttpQueryOptions;\n\n  configs.forEach(config => {\n    options = {\n      ...options,\n      ...config.options,\n      headers: {\n        ...options.headers,\n        ...config.headers,\n      }\n    };\n\n    if (config.credentials) {\n      options.credentials = config.credentials;\n    }\n\n    http = {\n      ...http,\n      ...config.http,\n    };\n  });\n\n  options.headers = removeDuplicateHeaders(options.headers, http.preserveHeaderCase);\n\n  //The body depends on the http options\n  const { operationName, extensions, variables, query } = operation;\n  const body: Body = { operationName, variables };\n\n  if (http.includeExtensions) (body as any).extensions = extensions;\n\n  // not sending the query (i.e persisted queries)\n  if (http.includeQuery) (body as any).query = printer(query, print);\n\n  return {\n    options,\n    body,\n  };\n};\n\n// Remove potential duplicate header names, preserving last (by insertion order).\n// This is done to prevent unintentionally duplicating a header instead of \n// overwriting it (See #8447 and #8449).\nfunction removeDuplicateHeaders(\n  headers: Record<string, string>,\n  preserveHeaderCase: boolean | undefined\n): typeof headers {\n\n  // If we're not preserving the case, just remove duplicates w/ normalization.\n  if (!preserveHeaderCase) {\n    const normalizedHeaders = Object.create(null);\n    Object.keys(Object(headers)).forEach(name => {\n      normalizedHeaders[name.toLowerCase()] = headers[name];\n    });\n    return normalizedHeaders; \n  }\n\n  // If we are preserving the case, remove duplicates w/ normalization,\n  // preserving the original name.\n  // This allows for non-http-spec-compliant servers that expect intentionally \n  // capitalized header names (See #6741).\n  const headerData = Object.create(null);\n  Object.keys(Object(headers)).forEach(name => {\n    headerData[name.toLowerCase()] = { originalName: name, value: headers[name] }\n  });\n\n  const normalizedHeaders = Object.create(null);\n  Object.keys(headerData).forEach(name => {\n    normalizedHeaders[headerData[name].originalName] = headerData[name].value;\n  });\n  return normalizedHeaders;\n}\n"]},"metadata":{},"sourceType":"module"}