{"ast":null,"code":"import { toError } from '../jsutils/toError.mjs';\nimport { GraphQLError } from './GraphQLError.mjs';\n/**\n * Given an arbitrary value, presumably thrown while attempting to execute a\n * GraphQL operation, produce a new GraphQLError aware of the location in the\n * document responsible for the original Error.\n */\n\nexport function locatedError(rawOriginalError, nodes, path) {\n  var _nodes;\n\n  const originalError = toError(rawOriginalError); // Note: this uses a brand-check to support GraphQL errors originating from other contexts.\n\n  if (isLocatedGraphQLError(originalError)) {\n    return originalError;\n  }\n\n  return new GraphQLError(originalError.message, {\n    nodes: (_nodes = originalError.nodes) !== null && _nodes !== void 0 ? _nodes : nodes,\n    source: originalError.source,\n    positions: originalError.positions,\n    path,\n    originalError\n  });\n}\n\nfunction isLocatedGraphQLError(error) {\n  return Array.isArray(error.path);\n}","map":{"version":3,"sources":["/Users/kulta/Code/part6/graphql-phonebook-frontend/node_modules/graphql/error/locatedError.mjs"],"names":["toError","GraphQLError","locatedError","rawOriginalError","nodes","path","_nodes","originalError","isLocatedGraphQLError","message","source","positions","error","Array","isArray"],"mappings":"AAAA,SAASA,OAAT,QAAwB,wBAAxB;AACA,SAASC,YAAT,QAA6B,oBAA7B;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASC,YAAT,CAAsBC,gBAAtB,EAAwCC,KAAxC,EAA+CC,IAA/C,EAAqD;AAC1D,MAAIC,MAAJ;;AAEA,QAAMC,aAAa,GAAGP,OAAO,CAACG,gBAAD,CAA7B,CAH0D,CAGT;;AAEjD,MAAIK,qBAAqB,CAACD,aAAD,CAAzB,EAA0C;AACxC,WAAOA,aAAP;AACD;;AAED,SAAO,IAAIN,YAAJ,CAAiBM,aAAa,CAACE,OAA/B,EAAwC;AAC7CL,IAAAA,KAAK,EACH,CAACE,MAAM,GAAGC,aAAa,CAACH,KAAxB,MAAmC,IAAnC,IAA2CE,MAAM,KAAK,KAAK,CAA3D,GACIA,MADJ,GAEIF,KAJuC;AAK7CM,IAAAA,MAAM,EAAEH,aAAa,CAACG,MALuB;AAM7CC,IAAAA,SAAS,EAAEJ,aAAa,CAACI,SANoB;AAO7CN,IAAAA,IAP6C;AAQ7CE,IAAAA;AAR6C,GAAxC,CAAP;AAUD;;AAED,SAASC,qBAAT,CAA+BI,KAA/B,EAAsC;AACpC,SAAOC,KAAK,CAACC,OAAN,CAAcF,KAAK,CAACP,IAApB,CAAP;AACD","sourcesContent":["import { toError } from '../jsutils/toError.mjs';\nimport { GraphQLError } from './GraphQLError.mjs';\n/**\n * Given an arbitrary value, presumably thrown while attempting to execute a\n * GraphQL operation, produce a new GraphQLError aware of the location in the\n * document responsible for the original Error.\n */\n\nexport function locatedError(rawOriginalError, nodes, path) {\n  var _nodes;\n\n  const originalError = toError(rawOriginalError); // Note: this uses a brand-check to support GraphQL errors originating from other contexts.\n\n  if (isLocatedGraphQLError(originalError)) {\n    return originalError;\n  }\n\n  return new GraphQLError(originalError.message, {\n    nodes:\n      (_nodes = originalError.nodes) !== null && _nodes !== void 0\n        ? _nodes\n        : nodes,\n    source: originalError.source,\n    positions: originalError.positions,\n    path,\n    originalError,\n  });\n}\n\nfunction isLocatedGraphQLError(error) {\n  return Array.isArray(error.path);\n}\n"]},"metadata":{},"sourceType":"module"}