{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport { invariant } from \"../utilities/globals/index.js\";\nimport { equal } from '@wry/equality';\nimport { NetworkStatus, isNetworkRequestInFlight } from \"./networkStatus.js\";\nimport { cloneDeep, compact, getOperationDefinition, Observable, iterateObserversSafely, isNonEmptyArray, fixObservableSubclass, getQueryDefinition } from \"../utilities/index.js\";\nvar assign = Object.assign,\n    hasOwnProperty = Object.hasOwnProperty;\n\nvar ObservableQuery = function (_super) {\n  __extends(ObservableQuery, _super);\n\n  function ObservableQuery(_a) {\n    var queryManager = _a.queryManager,\n        queryInfo = _a.queryInfo,\n        options = _a.options;\n\n    var _this = _super.call(this, function (observer) {\n      try {\n        var subObserver = observer._subscription._observer;\n\n        if (subObserver && !subObserver.error) {\n          subObserver.error = defaultSubscriptionObserverErrorCallback;\n        }\n      } catch (_a) {}\n\n      var first = !_this.observers.size;\n\n      _this.observers.add(observer);\n\n      var last = _this.last;\n\n      if (last && last.error) {\n        observer.error && observer.error(last.error);\n      } else if (last && last.result) {\n        observer.next && observer.next(last.result);\n      }\n\n      if (first) {\n        _this.reobserve().catch(function () {});\n      }\n\n      return function () {\n        if (_this.observers.delete(observer) && !_this.observers.size) {\n          _this.tearDownQuery();\n        }\n      };\n    }) || this;\n\n    _this.observers = new Set();\n    _this.subscriptions = new Set();\n    _this.queryInfo = queryInfo;\n    _this.queryManager = queryManager;\n    _this.isTornDown = false;\n\n    var _b = queryManager.defaultOptions.watchQuery,\n        _c = _b === void 0 ? {} : _b,\n        _d = _c.fetchPolicy,\n        defaultFetchPolicy = _d === void 0 ? \"cache-first\" : _d;\n\n    var _e = options.fetchPolicy,\n        fetchPolicy = _e === void 0 ? defaultFetchPolicy : _e,\n        _f = options.initialFetchPolicy,\n        initialFetchPolicy = _f === void 0 ? fetchPolicy === \"standby\" ? defaultFetchPolicy : fetchPolicy : _f;\n    _this.options = __assign(__assign({}, options), {\n      initialFetchPolicy: initialFetchPolicy,\n      fetchPolicy: fetchPolicy\n    });\n    _this.queryId = queryInfo.queryId || queryManager.generateQueryId();\n    var opDef = getOperationDefinition(_this.query);\n    _this.queryName = opDef && opDef.name && opDef.name.value;\n    return _this;\n  }\n\n  Object.defineProperty(ObservableQuery.prototype, \"query\", {\n    get: function () {\n      return this.queryManager.transform(this.options.query).document;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ObservableQuery.prototype, \"variables\", {\n    get: function () {\n      return this.options.variables;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  ObservableQuery.prototype.result = function () {\n    var _this = this;\n\n    return new Promise(function (resolve, reject) {\n      var observer = {\n        next: function (result) {\n          resolve(result);\n\n          _this.observers.delete(observer);\n\n          if (!_this.observers.size) {\n            _this.queryManager.removeQuery(_this.queryId);\n          }\n\n          setTimeout(function () {\n            subscription.unsubscribe();\n          }, 0);\n        },\n        error: reject\n      };\n\n      var subscription = _this.subscribe(observer);\n    });\n  };\n\n  ObservableQuery.prototype.getCurrentResult = function (saveAsLastResult) {\n    if (saveAsLastResult === void 0) {\n      saveAsLastResult = true;\n    }\n\n    var lastResult = this.getLastResult(true);\n    var networkStatus = this.queryInfo.networkStatus || lastResult && lastResult.networkStatus || NetworkStatus.ready;\n\n    var result = __assign(__assign({}, lastResult), {\n      loading: isNetworkRequestInFlight(networkStatus),\n      networkStatus: networkStatus\n    });\n\n    var _a = this.options.fetchPolicy,\n        fetchPolicy = _a === void 0 ? \"cache-first\" : _a;\n\n    if (fetchPolicy === 'network-only' || fetchPolicy === 'no-cache' || fetchPolicy === 'standby' || this.queryManager.transform(this.options.query).hasForcedResolvers) {} else {\n      var diff = this.queryInfo.getDiff();\n\n      if (diff.complete || this.options.returnPartialData) {\n        result.data = diff.result;\n      }\n\n      if (equal(result.data, {})) {\n        result.data = void 0;\n      }\n\n      if (diff.complete) {\n        delete result.partial;\n\n        if (diff.complete && result.networkStatus === NetworkStatus.loading && (fetchPolicy === 'cache-first' || fetchPolicy === 'cache-only')) {\n          result.networkStatus = NetworkStatus.ready;\n          result.loading = false;\n        }\n      } else {\n        result.partial = true;\n      }\n\n      if (__DEV__ && !diff.complete && !this.options.partialRefetch && !result.loading && !result.data && !result.error) {\n        logMissingFieldErrors(diff.missing);\n      }\n    }\n\n    if (saveAsLastResult) {\n      this.updateLastResult(result);\n    }\n\n    return result;\n  };\n\n  ObservableQuery.prototype.isDifferentFromLastResult = function (newResult, variables) {\n    return !this.last || !equal(this.last.result, newResult) || variables && !equal(this.last.variables, variables);\n  };\n\n  ObservableQuery.prototype.getLast = function (key, variablesMustMatch) {\n    var last = this.last;\n\n    if (last && last[key] && (!variablesMustMatch || equal(last.variables, this.variables))) {\n      return last[key];\n    }\n  };\n\n  ObservableQuery.prototype.getLastResult = function (variablesMustMatch) {\n    return this.getLast(\"result\", variablesMustMatch);\n  };\n\n  ObservableQuery.prototype.getLastError = function (variablesMustMatch) {\n    return this.getLast(\"error\", variablesMustMatch);\n  };\n\n  ObservableQuery.prototype.resetLastResults = function () {\n    delete this.last;\n    this.isTornDown = false;\n  };\n\n  ObservableQuery.prototype.resetQueryStoreErrors = function () {\n    this.queryManager.resetErrors(this.queryId);\n  };\n\n  ObservableQuery.prototype.refetch = function (variables) {\n    var _a;\n\n    var reobserveOptions = {\n      pollInterval: 0\n    };\n    var fetchPolicy = this.options.fetchPolicy;\n\n    if (fetchPolicy === 'cache-and-network') {\n      reobserveOptions.fetchPolicy = fetchPolicy;\n    } else if (fetchPolicy === 'no-cache') {\n      reobserveOptions.fetchPolicy = 'no-cache';\n    } else {\n      reobserveOptions.fetchPolicy = 'network-only';\n    }\n\n    if (__DEV__ && variables && hasOwnProperty.call(variables, \"variables\")) {\n      var queryDef = getQueryDefinition(this.query);\n      var vars = queryDef.variableDefinitions;\n\n      if (!vars || !vars.some(function (v) {\n        return v.variable.name.value === \"variables\";\n      })) {\n        __DEV__ && invariant.warn(\"Called refetch(\".concat(JSON.stringify(variables), \") for query \").concat(((_a = queryDef.name) === null || _a === void 0 ? void 0 : _a.value) || JSON.stringify(queryDef), \", which does not declare a $variables variable.\\nDid you mean to call refetch(variables) instead of refetch({ variables })?\"));\n      }\n    }\n\n    if (variables && !equal(this.options.variables, variables)) {\n      reobserveOptions.variables = this.options.variables = __assign(__assign({}, this.options.variables), variables);\n    }\n\n    this.queryInfo.resetLastWrite();\n    return this.reobserve(reobserveOptions, NetworkStatus.refetch);\n  };\n\n  ObservableQuery.prototype.fetchMore = function (fetchMoreOptions) {\n    var _this = this;\n\n    var combinedOptions = __assign(__assign({}, fetchMoreOptions.query ? fetchMoreOptions : __assign(__assign(__assign(__assign({}, this.options), {\n      query: this.query\n    }), fetchMoreOptions), {\n      variables: __assign(__assign({}, this.options.variables), fetchMoreOptions.variables)\n    })), {\n      fetchPolicy: \"no-cache\"\n    });\n\n    var qid = this.queryManager.generateQueryId();\n    var queryInfo = this.queryInfo;\n    var originalNetworkStatus = queryInfo.networkStatus;\n    queryInfo.networkStatus = NetworkStatus.fetchMore;\n\n    if (combinedOptions.notifyOnNetworkStatusChange) {\n      this.observe();\n    }\n\n    var updatedQuerySet = new Set();\n    return this.queryManager.fetchQuery(qid, combinedOptions, NetworkStatus.fetchMore).then(function (fetchMoreResult) {\n      _this.queryManager.removeQuery(qid);\n\n      if (queryInfo.networkStatus === NetworkStatus.fetchMore) {\n        queryInfo.networkStatus = originalNetworkStatus;\n      }\n\n      _this.queryManager.cache.batch({\n        update: function (cache) {\n          var updateQuery = fetchMoreOptions.updateQuery;\n\n          if (updateQuery) {\n            cache.updateQuery({\n              query: _this.query,\n              variables: _this.variables,\n              returnPartialData: true,\n              optimistic: false\n            }, function (previous) {\n              return updateQuery(previous, {\n                fetchMoreResult: fetchMoreResult.data,\n                variables: combinedOptions.variables\n              });\n            });\n          } else {\n            cache.writeQuery({\n              query: combinedOptions.query,\n              variables: combinedOptions.variables,\n              data: fetchMoreResult.data\n            });\n          }\n        },\n        onWatchUpdated: function (watch) {\n          updatedQuerySet.add(watch.query);\n        }\n      });\n\n      return fetchMoreResult;\n    }).finally(function () {\n      if (!updatedQuerySet.has(_this.query)) {\n        reobserveCacheFirst(_this);\n      }\n    });\n  };\n\n  ObservableQuery.prototype.subscribeToMore = function (options) {\n    var _this = this;\n\n    var subscription = this.queryManager.startGraphQLSubscription({\n      query: options.document,\n      variables: options.variables,\n      context: options.context\n    }).subscribe({\n      next: function (subscriptionData) {\n        var updateQuery = options.updateQuery;\n\n        if (updateQuery) {\n          _this.updateQuery(function (previous, _a) {\n            var variables = _a.variables;\n            return updateQuery(previous, {\n              subscriptionData: subscriptionData,\n              variables: variables\n            });\n          });\n        }\n      },\n      error: function (err) {\n        if (options.onError) {\n          options.onError(err);\n          return;\n        }\n\n        __DEV__ && invariant.error('Unhandled GraphQL subscription error', err);\n      }\n    });\n    this.subscriptions.add(subscription);\n    return function () {\n      if (_this.subscriptions.delete(subscription)) {\n        subscription.unsubscribe();\n      }\n    };\n  };\n\n  ObservableQuery.prototype.setOptions = function (newOptions) {\n    return this.reobserve(newOptions);\n  };\n\n  ObservableQuery.prototype.setVariables = function (variables) {\n    if (equal(this.variables, variables)) {\n      return this.observers.size ? this.result() : Promise.resolve();\n    }\n\n    this.options.variables = variables;\n\n    if (!this.observers.size) {\n      return Promise.resolve();\n    }\n\n    return this.reobserve({\n      fetchPolicy: this.options.initialFetchPolicy,\n      variables: variables\n    }, NetworkStatus.setVariables);\n  };\n\n  ObservableQuery.prototype.updateQuery = function (mapFn) {\n    var queryManager = this.queryManager;\n    var result = queryManager.cache.diff({\n      query: this.options.query,\n      variables: this.variables,\n      returnPartialData: true,\n      optimistic: false\n    }).result;\n    var newResult = mapFn(result, {\n      variables: this.variables\n    });\n\n    if (newResult) {\n      queryManager.cache.writeQuery({\n        query: this.options.query,\n        data: newResult,\n        variables: this.variables\n      });\n      queryManager.broadcastQueries();\n    }\n  };\n\n  ObservableQuery.prototype.startPolling = function (pollInterval) {\n    this.options.pollInterval = pollInterval;\n    this.updatePolling();\n  };\n\n  ObservableQuery.prototype.stopPolling = function () {\n    this.options.pollInterval = 0;\n    this.updatePolling();\n  };\n\n  ObservableQuery.prototype.applyNextFetchPolicy = function (reason, options) {\n    if (options.nextFetchPolicy) {\n      var _a = options.fetchPolicy,\n          fetchPolicy = _a === void 0 ? \"cache-first\" : _a,\n          _b = options.initialFetchPolicy,\n          initialFetchPolicy = _b === void 0 ? fetchPolicy : _b;\n\n      if (fetchPolicy === \"standby\") {} else if (typeof options.nextFetchPolicy === \"function\") {\n        options.fetchPolicy = options.nextFetchPolicy(fetchPolicy, {\n          reason: reason,\n          options: options,\n          observable: this,\n          initialFetchPolicy: initialFetchPolicy\n        });\n      } else if (reason === \"variables-changed\") {\n        options.fetchPolicy = initialFetchPolicy;\n      } else {\n        options.fetchPolicy = options.nextFetchPolicy;\n      }\n    }\n\n    return options.fetchPolicy;\n  };\n\n  ObservableQuery.prototype.fetch = function (options, newNetworkStatus) {\n    this.queryManager.setObservableQuery(this);\n    return this.queryManager.fetchQueryObservable(this.queryId, options, newNetworkStatus);\n  };\n\n  ObservableQuery.prototype.updatePolling = function () {\n    var _this = this;\n\n    if (this.queryManager.ssrMode) {\n      return;\n    }\n\n    var _a = this,\n        pollingInfo = _a.pollingInfo,\n        pollInterval = _a.options.pollInterval;\n\n    if (!pollInterval) {\n      if (pollingInfo) {\n        clearTimeout(pollingInfo.timeout);\n        delete this.pollingInfo;\n      }\n\n      return;\n    }\n\n    if (pollingInfo && pollingInfo.interval === pollInterval) {\n      return;\n    }\n\n    __DEV__ ? invariant(pollInterval, 'Attempted to start a polling query without a polling interval.') : invariant(pollInterval, 12);\n    var info = pollingInfo || (this.pollingInfo = {});\n    info.interval = pollInterval;\n\n    var maybeFetch = function () {\n      if (_this.pollingInfo) {\n        if (!isNetworkRequestInFlight(_this.queryInfo.networkStatus)) {\n          _this.reobserve({\n            fetchPolicy: _this.options.initialFetchPolicy === 'no-cache' ? 'no-cache' : 'network-only'\n          }, NetworkStatus.poll).then(poll, poll);\n        } else {\n          poll();\n        }\n      }\n\n      ;\n    };\n\n    var poll = function () {\n      var info = _this.pollingInfo;\n\n      if (info) {\n        clearTimeout(info.timeout);\n        info.timeout = setTimeout(maybeFetch, info.interval);\n      }\n    };\n\n    poll();\n  };\n\n  ObservableQuery.prototype.updateLastResult = function (newResult, variables) {\n    if (variables === void 0) {\n      variables = this.variables;\n    }\n\n    this.last = __assign(__assign({}, this.last), {\n      result: this.queryManager.assumeImmutableResults ? newResult : cloneDeep(newResult),\n      variables: variables\n    });\n\n    if (!isNonEmptyArray(newResult.errors)) {\n      delete this.last.error;\n    }\n\n    return this.last;\n  };\n\n  ObservableQuery.prototype.reobserve = function (newOptions, newNetworkStatus) {\n    var _this = this;\n\n    this.isTornDown = false;\n    var useDisposableConcast = newNetworkStatus === NetworkStatus.refetch || newNetworkStatus === NetworkStatus.fetchMore || newNetworkStatus === NetworkStatus.poll;\n    var oldVariables = this.options.variables;\n    var oldFetchPolicy = this.options.fetchPolicy;\n    var mergedOptions = compact(this.options, newOptions || {});\n    var options = useDisposableConcast ? mergedOptions : assign(this.options, mergedOptions);\n\n    if (!useDisposableConcast) {\n      this.updatePolling();\n\n      if (newOptions && newOptions.variables && !equal(newOptions.variables, oldVariables) && options.fetchPolicy !== \"standby\" && options.fetchPolicy === oldFetchPolicy) {\n        this.applyNextFetchPolicy(\"variables-changed\", options);\n\n        if (newNetworkStatus === void 0) {\n          newNetworkStatus = NetworkStatus.setVariables;\n        }\n      }\n    }\n\n    var variables = options.variables && __assign({}, options.variables);\n\n    var concast = this.fetch(options, newNetworkStatus);\n    var observer = {\n      next: function (result) {\n        _this.reportResult(result, variables);\n      },\n      error: function (error) {\n        _this.reportError(error, variables);\n      }\n    };\n\n    if (!useDisposableConcast) {\n      if (this.concast && this.observer) {\n        this.concast.removeObserver(this.observer);\n      }\n\n      this.concast = concast;\n      this.observer = observer;\n    }\n\n    concast.addObserver(observer);\n    return concast.promise;\n  };\n\n  ObservableQuery.prototype.observe = function () {\n    this.reportResult(this.getCurrentResult(false), this.variables);\n  };\n\n  ObservableQuery.prototype.reportResult = function (result, variables) {\n    var lastError = this.getLastError();\n\n    if (lastError || this.isDifferentFromLastResult(result, variables)) {\n      if (lastError || !result.partial || this.options.returnPartialData) {\n        this.updateLastResult(result, variables);\n      }\n\n      iterateObserversSafely(this.observers, 'next', result);\n    }\n  };\n\n  ObservableQuery.prototype.reportError = function (error, variables) {\n    var errorResult = __assign(__assign({}, this.getLastResult()), {\n      error: error,\n      errors: error.graphQLErrors,\n      networkStatus: NetworkStatus.error,\n      loading: false\n    });\n\n    this.updateLastResult(errorResult, variables);\n    iterateObserversSafely(this.observers, 'error', this.last.error = error);\n  };\n\n  ObservableQuery.prototype.hasObservers = function () {\n    return this.observers.size > 0;\n  };\n\n  ObservableQuery.prototype.tearDownQuery = function () {\n    if (this.isTornDown) return;\n\n    if (this.concast && this.observer) {\n      this.concast.removeObserver(this.observer);\n      delete this.concast;\n      delete this.observer;\n    }\n\n    this.stopPolling();\n    this.subscriptions.forEach(function (sub) {\n      return sub.unsubscribe();\n    });\n    this.subscriptions.clear();\n    this.queryManager.stopQuery(this.queryId);\n    this.observers.clear();\n    this.isTornDown = true;\n  };\n\n  return ObservableQuery;\n}(Observable);\n\nexport { ObservableQuery };\nfixObservableSubclass(ObservableQuery);\nexport function reobserveCacheFirst(obsQuery) {\n  var _a = obsQuery.options,\n      fetchPolicy = _a.fetchPolicy,\n      nextFetchPolicy = _a.nextFetchPolicy;\n\n  if (fetchPolicy === \"cache-and-network\" || fetchPolicy === \"network-only\") {\n    return obsQuery.reobserve({\n      fetchPolicy: \"cache-first\",\n      nextFetchPolicy: function () {\n        this.nextFetchPolicy = nextFetchPolicy;\n\n        if (typeof nextFetchPolicy === \"function\") {\n          return nextFetchPolicy.apply(this, arguments);\n        }\n\n        return fetchPolicy;\n      }\n    });\n  }\n\n  return obsQuery.reobserve();\n}\n\nfunction defaultSubscriptionObserverErrorCallback(error) {\n  __DEV__ && invariant.error('Unhandled error', error.message, error.stack);\n}\n\nexport function logMissingFieldErrors(missing) {\n  if (__DEV__ && missing) {\n    __DEV__ && invariant.debug(\"Missing cache result fields: \".concat(JSON.stringify(missing)), missing);\n  }\n}","map":{"version":3,"mappings":"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","names":["invariant","equal","NetworkStatus","isNetworkRequestInFlight","cloneDeep","compact","getOperationDefinition","Observable","iterateObserversSafely","isNonEmptyArray","fixObservableSubclass","getQueryDefinition","Object","hasOwnProperty","__extends","_a","queryManager","queryInfo","options","_super","observer","subObserver","_subscription","_observer","error","defaultSubscriptionObserverErrorCallback","first","_this","observers","size","add","last","result","next","reobserve","catch","delete","tearDownQuery","Set","isTornDown","defaultOptions","watchQuery","_b","_d","defaultFetchPolicy","_e","_f","initialFetchPolicy","fetchPolicy","__assign","queryId","generateQueryId","opDef","query","queryName","name","value","ObservableQuery","transform","document","variables","Promise","resolve","reject","removeQuery","setTimeout","subscription","unsubscribe","subscribe","saveAsLastResult","lastResult","getLastResult","networkStatus","ready","loading","hasForcedResolvers","diff","getDiff","complete","returnPartialData","data","partial","__DEV__","partialRefetch","logMissingFieldErrors","missing","updateLastResult","newResult","key","variablesMustMatch","getLast","resetErrors","reobserveOptions","pollInterval","call","queryDef","vars","variableDefinitions","some","variable","concat","JSON","resetLastWrite","refetch","fetchMoreOptions","combinedOptions","qid","originalNetworkStatus","fetchMore","notifyOnNetworkStatusChange","observe","updatedQuerySet","fetchQuery","then","cache","batch","update","updateQuery","optimistic","previous","fetchMoreResult","writeQuery","onWatchUpdated","watch","finally","has","reobserveCacheFirst","startGraphQLSubscription","context","subscriptionData","err","onError","subscriptions","newOptions","setVariables","mapFn","broadcastQueries","updatePolling","reason","nextFetchPolicy","observable","newNetworkStatus","setObservableQuery","fetchQueryObservable","ssrMode","pollingInfo","clearTimeout","timeout","interval","info","maybeFetch","poll","assumeImmutableResults","errors","useDisposableConcast","oldVariables","oldFetchPolicy","mergedOptions","assign","applyNextFetchPolicy","concast","fetch","reportResult","reportError","removeObserver","addObserver","promise","getCurrentResult","lastError","getLastError","isDifferentFromLastResult","errorResult","graphQLErrors","stopPolling","forEach","clear","stopQuery","obsQuery","apply","arguments"],"sources":["/Users/kulta/Code/part6/graphql-phonebook-frontend/node_modules/@apollo/src/core/ObservableQuery.ts"],"sourcesContent":["import { invariant } from '../utilities/globals';\nimport { DocumentNode } from 'graphql';\nimport { equal } from '@wry/equality';\n\nimport { NetworkStatus, isNetworkRequestInFlight } from './networkStatus';\nimport {\n  Concast,\n  cloneDeep,\n  compact,\n  getOperationDefinition,\n  Observable,\n  Observer,\n  ObservableSubscription,\n  iterateObserversSafely,\n  isNonEmptyArray,\n  fixObservableSubclass,\n  getQueryDefinition,\n} from '../utilities';\nimport { ApolloError } from '../errors';\nimport { QueryManager } from './QueryManager';\nimport {\n  ApolloQueryResult,\n  OperationVariables,\n  TypedDocumentNode,\n} from './types';\nimport {\n  WatchQueryOptions,\n  FetchMoreQueryOptions,\n  SubscribeToMoreOptions,\n  NextFetchPolicyContext,\n} from './watchQueryOptions';\nimport { QueryInfo } from './QueryInfo';\nimport { MissingFieldError } from '../cache';\nimport { MissingTree } from '../cache/core/types/common';\n\nconst {\n  assign,\n  hasOwnProperty,\n} = Object;\n\nexport interface FetchMoreOptions<\n  TData = any,\n  TVariables = OperationVariables\n> {\n  updateQuery?: (\n    previousQueryResult: TData,\n    options: {\n      fetchMoreResult?: TData;\n      variables?: TVariables;\n    },\n  ) => TData;\n}\n\nexport interface UpdateQueryOptions<TVariables> {\n  variables?: TVariables;\n}\n\ninterface Last<TData, TVariables> {\n  result: ApolloQueryResult<TData>;\n  variables?: TVariables;\n  error?: ApolloError;\n}\n\nexport class ObservableQuery<\n  TData = any,\n  TVariables = OperationVariables\n> extends Observable<ApolloQueryResult<TData>> {\n  public readonly options: WatchQueryOptions<TVariables, TData>;\n  public readonly queryId: string;\n  public readonly queryName?: string;\n\n  public get query(): TypedDocumentNode<TData, TVariables> {\n    // This transform is heavily cached, so it should not be expensive to\n    // transform the same this.options.query document repeatedly.\n    return this.queryManager.transform(this.options.query).document;\n  }\n\n  // Computed shorthand for this.options.variables, preserved for\n  // backwards compatibility.\n  public get variables(): TVariables | undefined {\n    return this.options.variables;\n  }\n\n  private isTornDown: boolean;\n  private queryManager: QueryManager<any>;\n  private observers = new Set<Observer<ApolloQueryResult<TData>>>();\n  private subscriptions = new Set<ObservableSubscription>();\n\n  private last?: Last<TData, TVariables>;\n\n  private queryInfo: QueryInfo;\n\n  // When this.concast is defined, this.observer is the Observer currently\n  // subscribed to that Concast.\n  private concast?: Concast<ApolloQueryResult<TData>>;\n  private observer?: Observer<ApolloQueryResult<TData>>;\n\n  private pollingInfo?: {\n    interval: number;\n    timeout: ReturnType<typeof setTimeout>;\n  };\n\n  constructor({\n    queryManager,\n    queryInfo,\n    options,\n  }: {\n    queryManager: QueryManager<any>;\n    queryInfo: QueryInfo;\n    options: WatchQueryOptions<TVariables, TData>;\n  }) {\n    super((observer: Observer<ApolloQueryResult<TData>>) => {\n      // Zen Observable has its own error function, so in order to log correctly\n      // we need to provide a custom error callback.\n      try {\n        var subObserver = (observer as any)._subscription._observer;\n        if (subObserver && !subObserver.error) {\n          subObserver.error = defaultSubscriptionObserverErrorCallback;\n        }\n      } catch {}\n\n      const first = !this.observers.size;\n      this.observers.add(observer);\n\n      // Deliver most recent error or result.\n      const last = this.last;\n      if (last && last.error) {\n        observer.error && observer.error(last.error);\n      } else if (last && last.result) {\n        observer.next && observer.next(last.result);\n      }\n\n      // Initiate observation of this query if it hasn't been reported to\n      // the QueryManager yet.\n      if (first) {\n        // Blindly catching here prevents unhandled promise rejections,\n        // and is safe because the ObservableQuery handles this error with\n        // this.observer.error, so we're not just swallowing the error by\n        // ignoring it here.\n        this.reobserve().catch(() => {});\n      }\n\n      return () => {\n        if (this.observers.delete(observer) && !this.observers.size) {\n          this.tearDownQuery();\n        }\n      };\n    });\n\n    // related classes\n    this.queryInfo = queryInfo;\n    this.queryManager = queryManager;\n\n    // active state\n    this.isTornDown = false;\n\n    const {\n      watchQuery: {\n        fetchPolicy: defaultFetchPolicy = \"cache-first\",\n      } = {},\n    } = queryManager.defaultOptions;\n\n    const {\n      fetchPolicy = defaultFetchPolicy,\n      initialFetchPolicy = (\n        // Make sure we don't store \"standby\" as the initialFetchPolicy.\n        fetchPolicy === \"standby\" ? defaultFetchPolicy : fetchPolicy\n      ),\n    } = options;\n\n    this.options = {\n      ...options,\n\n      // Remember the initial options.fetchPolicy so we can revert back to this\n      // policy when variables change. This information can also be specified\n      // (or overridden) by providing options.initialFetchPolicy explicitly.\n      initialFetchPolicy,\n\n      // This ensures this.options.fetchPolicy always has a string value, in\n      // case options.fetchPolicy was not provided.\n      fetchPolicy,\n    };\n\n    this.queryId = queryInfo.queryId || queryManager.generateQueryId();\n\n    const opDef = getOperationDefinition(this.query);\n    this.queryName = opDef && opDef.name && opDef.name.value;\n  }\n\n  public result(): Promise<ApolloQueryResult<TData>> {\n    return new Promise((resolve, reject) => {\n      // TODO: this code doesn’t actually make sense insofar as the observer\n      // will never exist in this.observers due how zen-observable wraps observables.\n      // https://github.com/zenparsing/zen-observable/blob/master/src/Observable.js#L169\n      const observer: Observer<ApolloQueryResult<TData>> = {\n        next: (result: ApolloQueryResult<TData>) => {\n          resolve(result);\n\n          // Stop the query within the QueryManager if we can before\n          // this function returns.\n          //\n          // We do this in order to prevent observers piling up within\n          // the QueryManager. Notice that we only fully unsubscribe\n          // from the subscription in a setTimeout(..., 0)  call. This call can\n          // actually be handled by the browser at a much later time. If queries\n          // are fired in the meantime, observers that should have been removed\n          // from the QueryManager will continue to fire, causing an unnecessary\n          // performance hit.\n          this.observers.delete(observer);\n          if (!this.observers.size) {\n            this.queryManager.removeQuery(this.queryId);\n          }\n\n          setTimeout(() => {\n            subscription.unsubscribe();\n          }, 0);\n        },\n        error: reject,\n      };\n      const subscription = this.subscribe(observer);\n    });\n  }\n\n  public getCurrentResult(saveAsLastResult = true): ApolloQueryResult<TData> {\n    // Use the last result as long as the variables match this.variables.\n    const lastResult = this.getLastResult(true);\n\n    const networkStatus =\n      this.queryInfo.networkStatus ||\n      (lastResult && lastResult.networkStatus) ||\n      NetworkStatus.ready;\n\n    const result = {\n      ...lastResult,\n      loading: isNetworkRequestInFlight(networkStatus),\n      networkStatus,\n    } as ApolloQueryResult<TData>;\n\n    const { fetchPolicy = \"cache-first\" } = this.options;\n    if (\n      // These fetch policies should never deliver data from the cache, unless\n      // redelivering a previously delivered result.\n      fetchPolicy === 'network-only' ||\n      fetchPolicy === 'no-cache' ||\n      fetchPolicy === 'standby' ||\n      // If this.options.query has @client(always: true) fields, we cannot\n      // trust diff.result, since it was read from the cache without running\n      // local resolvers (and it's too late to run resolvers now, since we must\n      // return a result synchronously).\n      this.queryManager.transform(this.options.query).hasForcedResolvers\n    ) {\n      // Fall through.\n    } else {\n      const diff = this.queryInfo.getDiff();\n\n      if (diff.complete || this.options.returnPartialData) {\n        result.data = diff.result;\n      }\n\n      if (equal(result.data, {})) {\n        result.data = void 0 as any;\n      }\n\n      if (diff.complete) {\n        // Similar to setting result.partial to false, but taking advantage of the\n        // falsiness of missing fields.\n        delete result.partial;\n\n        // If the diff is complete, and we're using a FetchPolicy that\n        // terminates after a complete cache read, we can assume the next result\n        // we receive will have NetworkStatus.ready and !loading.\n        if (\n          diff.complete &&\n          result.networkStatus === NetworkStatus.loading &&\n          (fetchPolicy === 'cache-first' ||\n          fetchPolicy === 'cache-only')\n        ) {\n          result.networkStatus = NetworkStatus.ready;\n          result.loading = false;\n        }\n      } else {\n        result.partial = true;\n      }\n\n      if (\n        __DEV__ &&\n        !diff.complete &&\n        !this.options.partialRefetch &&\n        !result.loading &&\n        !result.data &&\n        !result.error\n      ) {\n        logMissingFieldErrors(diff.missing);\n      }\n    }\n\n    if (saveAsLastResult) {\n      this.updateLastResult(result);\n    }\n\n    return result;\n  }\n\n  // Compares newResult to the snapshot we took of this.lastResult when it was\n  // first received.\n  public isDifferentFromLastResult(\n    newResult: ApolloQueryResult<TData>,\n    variables?: TVariables\n  ) {\n    return (\n      !this.last ||\n      !equal(this.last.result, newResult) ||\n      (variables && !equal(this.last.variables, variables))\n    );\n  }\n\n  private getLast<K extends keyof Last<TData, TVariables>>(\n    key: K,\n    variablesMustMatch?: boolean,\n  ) {\n    const last = this.last;\n    if (\n      last &&\n      last[key] &&\n      (!variablesMustMatch || equal(last.variables, this.variables))\n    ) {\n      return last[key];\n    }\n  }\n\n  public getLastResult(variablesMustMatch?: boolean): ApolloQueryResult<TData> | undefined {\n    return this.getLast(\"result\", variablesMustMatch);\n  }\n\n  public getLastError(variablesMustMatch?: boolean): ApolloError | undefined {\n    return this.getLast(\"error\", variablesMustMatch);\n  }\n\n  public resetLastResults(): void {\n    delete this.last;\n    this.isTornDown = false;\n  }\n\n  public resetQueryStoreErrors() {\n    this.queryManager.resetErrors(this.queryId);\n  }\n\n  /**\n   * Update the variables of this observable query, and fetch the new results.\n   * This method should be preferred over `setVariables` in most use cases.\n   *\n   * @param variables: The new set of variables. If there are missing variables,\n   * the previous values of those variables will be used.\n   */\n  public refetch(variables?: Partial<TVariables>): Promise<ApolloQueryResult<TData>> {\n    const reobserveOptions: Partial<WatchQueryOptions<TVariables, TData>> = {\n      // Always disable polling for refetches.\n      pollInterval: 0,\n    };\n\n    // Unless the provided fetchPolicy always consults the network\n    // (no-cache, network-only, or cache-and-network), override it with\n    // network-only to force the refetch for this fetchQuery call.\n    const { fetchPolicy } = this.options;\n    if (fetchPolicy === 'cache-and-network') {\n      reobserveOptions.fetchPolicy = fetchPolicy;\n    } else if (fetchPolicy === 'no-cache') {\n      reobserveOptions.fetchPolicy = 'no-cache';\n    } else {\n      reobserveOptions.fetchPolicy = 'network-only';\n    }\n\n    if (__DEV__ && variables && hasOwnProperty.call(variables, \"variables\")) {\n      const queryDef = getQueryDefinition(this.query);\n      const vars = queryDef.variableDefinitions;\n      if (!vars || !vars.some(v => v.variable.name.value === \"variables\")) {\n        invariant.warn(`Called refetch(${\n          JSON.stringify(variables)\n        }) for query ${\n          queryDef.name?.value || JSON.stringify(queryDef)\n        }, which does not declare a $variables variable.\nDid you mean to call refetch(variables) instead of refetch({ variables })?`);\n      }\n    }\n\n    if (variables && !equal(this.options.variables, variables)) {\n      // Update the existing options with new variables\n      reobserveOptions.variables = this.options.variables = {\n        ...this.options.variables,\n        ...variables,\n      } as TVariables;\n    }\n\n    this.queryInfo.resetLastWrite();\n    return this.reobserve(reobserveOptions, NetworkStatus.refetch);\n  }\n\n  public fetchMore<\n    TFetchData = TData,\n    TFetchVars = TVariables,\n  >(fetchMoreOptions: FetchMoreQueryOptions<TFetchVars, TFetchData> & {\n    updateQuery?: (\n      previousQueryResult: TData,\n      options: {\n        fetchMoreResult: TFetchData;\n        variables: TFetchVars;\n      },\n    ) => TData;\n  }): Promise<ApolloQueryResult<TFetchData>> {\n    const combinedOptions = {\n      ...(fetchMoreOptions.query ? fetchMoreOptions : {\n        ...this.options,\n        query: this.query,\n        ...fetchMoreOptions,\n        variables: {\n          ...this.options.variables,\n          ...fetchMoreOptions.variables,\n        },\n      }),\n      // The fetchMore request goes immediately to the network and does\n      // not automatically write its result to the cache (hence no-cache\n      // instead of network-only), because we allow the caller of\n      // fetchMore to provide an updateQuery callback that determines how\n      // the data gets written to the cache.\n      fetchPolicy: \"no-cache\",\n    } as WatchQueryOptions<TFetchVars, TFetchData>;\n\n    const qid = this.queryManager.generateQueryId();\n\n    // Simulate a loading result for the original query with\n    // result.networkStatus === NetworkStatus.fetchMore.\n    const { queryInfo } = this;\n    const originalNetworkStatus = queryInfo.networkStatus;\n    queryInfo.networkStatus = NetworkStatus.fetchMore;\n    if (combinedOptions.notifyOnNetworkStatusChange) {\n      this.observe();\n    }\n\n    const updatedQuerySet = new Set<DocumentNode>();\n\n    return this.queryManager.fetchQuery(\n      qid,\n      combinedOptions,\n      NetworkStatus.fetchMore,\n    ).then(fetchMoreResult => {\n      this.queryManager.removeQuery(qid);\n\n      if (queryInfo.networkStatus === NetworkStatus.fetchMore) {\n        queryInfo.networkStatus = originalNetworkStatus;\n      }\n\n      // Performing this cache update inside a cache.batch transaction ensures\n      // any affected cache.watch watchers are notified at most once about any\n      // updates. Most watchers will be using the QueryInfo class, which\n      // responds to notifications by calling reobserveCacheFirst to deliver\n      // fetchMore cache results back to this ObservableQuery.\n      this.queryManager.cache.batch({\n        update: cache => {\n          const { updateQuery } = fetchMoreOptions;\n          if (updateQuery) {\n            cache.updateQuery({\n              query: this.query,\n              variables: this.variables,\n              returnPartialData: true,\n              optimistic: false,\n            }, previous => updateQuery(previous!, {\n              fetchMoreResult: fetchMoreResult.data,\n              variables: combinedOptions.variables as TFetchVars,\n            }));\n\n          } else {\n            // If we're using a field policy instead of updateQuery, the only\n            // thing we need to do is write the new data to the cache using\n            // combinedOptions.variables (instead of this.variables, which is\n            // what this.updateQuery uses, because it works by abusing the\n            // original field value, keyed by the original variables).\n            cache.writeQuery({\n              query: combinedOptions.query,\n              variables: combinedOptions.variables,\n              data: fetchMoreResult.data,\n            });\n          }\n        },\n\n        onWatchUpdated: watch => {\n          // Record the DocumentNode associated with any watched query whose\n          // data were updated by the cache writes above.\n          updatedQuerySet.add(watch.query);\n        },\n      });\n\n      return fetchMoreResult;\n\n    }).finally(() => {\n      // In case the cache writes above did not generate a broadcast\n      // notification (which would have been intercepted by onWatchUpdated),\n      // likely because the written data were the same as what was already in\n      // the cache, we still want fetchMore to deliver its final loading:false\n      // result with the unchanged data.\n      if (!updatedQuerySet.has(this.query)) {\n        reobserveCacheFirst(this);\n      }\n    });\n  }\n\n  // XXX the subscription variables are separate from the query variables.\n  // if you want to update subscription variables, right now you have to do that separately,\n  // and you can only do it by stopping the subscription and then subscribing again with new variables.\n  public subscribeToMore<\n    TSubscriptionData = TData,\n    TSubscriptionVariables = TVariables\n  >(\n    options: SubscribeToMoreOptions<\n      TData,\n      TSubscriptionVariables,\n      TSubscriptionData\n    >,\n  ) {\n    const subscription = this.queryManager\n      .startGraphQLSubscription({\n        query: options.document,\n        variables: options.variables,\n        context: options.context,\n      })\n      .subscribe({\n        next: (subscriptionData: { data: TSubscriptionData }) => {\n          const { updateQuery } = options;\n          if (updateQuery) {\n            this.updateQuery<TSubscriptionVariables>(\n              (previous, { variables }) =>\n                updateQuery(previous, {\n                  subscriptionData,\n                  variables,\n                }),\n            );\n          }\n        },\n        error: (err: any) => {\n          if (options.onError) {\n            options.onError(err);\n            return;\n          }\n          invariant.error('Unhandled GraphQL subscription error', err);\n        },\n      });\n\n    this.subscriptions.add(subscription);\n\n    return () => {\n      if (this.subscriptions.delete(subscription)) {\n        subscription.unsubscribe();\n      }\n    };\n  }\n\n  public setOptions(\n    newOptions: Partial<WatchQueryOptions<TVariables, TData>>,\n  ): Promise<ApolloQueryResult<TData>> {\n    return this.reobserve(newOptions);\n  }\n\n  /**\n   * This is for *internal* use only. Most users should instead use `refetch`\n   * in order to be properly notified of results even when they come from cache.\n   *\n   * Update the variables of this observable query, and fetch the new results\n   * if they've changed. If you want to force new results, use `refetch`.\n   *\n   * Note: the `next` callback will *not* fire if the variables have not changed\n   * or if the result is coming from cache.\n   *\n   * Note: the promise will return the old results immediately if the variables\n   * have not changed.\n   *\n   * Note: the promise will return null immediately if the query is not active\n   * (there are no subscribers).\n   *\n   * @private\n   *\n   * @param variables: The new set of variables. If there are missing variables,\n   * the previous values of those variables will be used.\n   */\n  public setVariables(\n    variables: TVariables,\n  ): Promise<ApolloQueryResult<TData> | void> {\n    if (equal(this.variables, variables)) {\n      // If we have no observers, then we don't actually want to make a network\n      // request. As soon as someone observes the query, the request will kick\n      // off. For now, we just store any changes. (See #1077)\n      return this.observers.size\n        ? this.result()\n        : Promise.resolve();\n    }\n\n    this.options.variables = variables;\n\n    // See comment above\n    if (!this.observers.size) {\n      return Promise.resolve();\n    }\n\n    return this.reobserve({\n      // Reset options.fetchPolicy to its original value.\n      fetchPolicy: this.options.initialFetchPolicy,\n      variables,\n    }, NetworkStatus.setVariables);\n  }\n\n  public updateQuery<TVars = TVariables>(\n    mapFn: (\n      previousQueryResult: TData,\n      options: Pick<WatchQueryOptions<TVars, TData>, \"variables\">,\n    ) => TData,\n  ): void {\n    const { queryManager } = this;\n    const { result } = queryManager.cache.diff<TData>({\n      query: this.options.query,\n      variables: this.variables,\n      returnPartialData: true,\n      optimistic: false,\n    });\n\n    const newResult = mapFn(result!, {\n      variables: (this as any).variables,\n    });\n\n    if (newResult) {\n      queryManager.cache.writeQuery({\n        query: this.options.query,\n        data: newResult,\n        variables: this.variables,\n      });\n\n      queryManager.broadcastQueries();\n    }\n  }\n\n  public startPolling(pollInterval: number) {\n    this.options.pollInterval = pollInterval;\n    this.updatePolling();\n  }\n\n  public stopPolling() {\n    this.options.pollInterval = 0;\n    this.updatePolling();\n  }\n\n  // Update options.fetchPolicy according to options.nextFetchPolicy.\n  private applyNextFetchPolicy(\n    reason: NextFetchPolicyContext<TData, TVariables>[\"reason\"],\n    // It's possible to use this method to apply options.nextFetchPolicy to\n    // options.fetchPolicy even if options !== this.options, though that happens\n    // most often when the options are temporary, used for only one request and\n    // then thrown away, so nextFetchPolicy may not end up mattering.\n    options: WatchQueryOptions<TVariables, TData>,\n  ) {\n    if (options.nextFetchPolicy) {\n      const {\n        fetchPolicy = \"cache-first\",\n        initialFetchPolicy = fetchPolicy,\n      } = options;\n\n      if (fetchPolicy === \"standby\") {\n        // Do nothing, leaving options.fetchPolicy unchanged.\n      } else if (typeof options.nextFetchPolicy === \"function\") {\n        // When someone chooses \"cache-and-network\" or \"network-only\" as their\n        // initial FetchPolicy, they often do not want future cache updates to\n        // trigger unconditional network requests, which is what repeatedly\n        // applying the \"cache-and-network\" or \"network-only\" policies would\n        // seem to imply. Instead, when the cache reports an update after the\n        // initial network request, it may be desirable for subsequent network\n        // requests to be triggered only if the cache result is incomplete. To\n        // that end, the options.nextFetchPolicy option provides an easy way to\n        // update options.fetchPolicy after the initial network request, without\n        // having to call observableQuery.setOptions.\n        options.fetchPolicy = options.nextFetchPolicy(fetchPolicy, {\n          reason,\n          options,\n          observable: this,\n          initialFetchPolicy,\n        });\n      } else if (reason === \"variables-changed\") {\n        options.fetchPolicy = initialFetchPolicy;\n      } else {\n        options.fetchPolicy = options.nextFetchPolicy;\n      }\n    }\n\n    return options.fetchPolicy;\n  }\n\n  private fetch(\n    options: WatchQueryOptions<TVariables, TData>,\n    newNetworkStatus?: NetworkStatus,\n  ): Concast<ApolloQueryResult<TData>> {\n    // TODO Make sure we update the networkStatus (and infer fetchVariables)\n    // before actually committing to the fetch.\n    this.queryManager.setObservableQuery(this);\n    return this.queryManager.fetchQueryObservable(\n      this.queryId,\n      options,\n      newNetworkStatus,\n    );\n  }\n\n  // Turns polling on or off based on this.options.pollInterval.\n  private updatePolling() {\n    // Avoid polling in SSR mode\n    if (this.queryManager.ssrMode) {\n      return;\n    }\n\n    const {\n      pollingInfo,\n      options: {\n        pollInterval,\n      },\n    } = this;\n\n    if (!pollInterval) {\n      if (pollingInfo) {\n        clearTimeout(pollingInfo.timeout);\n        delete this.pollingInfo;\n      }\n      return;\n    }\n\n    if (pollingInfo &&\n        pollingInfo.interval === pollInterval) {\n      return;\n    }\n\n    invariant(\n      pollInterval,\n      'Attempted to start a polling query without a polling interval.',\n    );\n\n    const info = pollingInfo || (this.pollingInfo = {} as any);\n    info.interval = pollInterval;\n\n    const maybeFetch = () => {\n      if (this.pollingInfo) {\n        if (!isNetworkRequestInFlight(this.queryInfo.networkStatus)) {\n          this.reobserve({\n            // Most fetchPolicy options don't make sense to use in a polling context, as\n            // users wouldn't want to be polling the cache directly. However, network-only and\n            // no-cache are both useful for when the user wants to control whether or not the\n            // polled results are written to the cache.\n            fetchPolicy: this.options.initialFetchPolicy === 'no-cache' ? 'no-cache' : 'network-only',\n          }, NetworkStatus.poll).then(poll, poll);\n        } else {\n          poll();\n        }\n      };\n    };\n\n    const poll = () => {\n      const info = this.pollingInfo;\n      if (info) {\n        clearTimeout(info.timeout);\n        info.timeout = setTimeout(maybeFetch, info.interval);\n      }\n    };\n\n    poll();\n  }\n\n  private updateLastResult(\n    newResult: ApolloQueryResult<TData>,\n    variables = this.variables,\n  ) {\n    this.last = {\n      ...this.last,\n      result: this.queryManager.assumeImmutableResults\n        ? newResult\n        : cloneDeep(newResult),\n      variables,\n    };\n    if (!isNonEmptyArray(newResult.errors)) {\n      delete this.last.error;\n    }\n    return this.last;\n  }\n\n  public reobserve(\n    newOptions?: Partial<WatchQueryOptions<TVariables, TData>>,\n    newNetworkStatus?: NetworkStatus,\n  ): Promise<ApolloQueryResult<TData>> {\n    this.isTornDown = false;\n\n    const useDisposableConcast =\n      // Refetching uses a disposable Concast to allow refetches using different\n      // options/variables, without permanently altering the options of the\n      // original ObservableQuery.\n      newNetworkStatus === NetworkStatus.refetch ||\n      // The fetchMore method does not actually call the reobserve method, but,\n      // if it did, it would definitely use a disposable Concast.\n      newNetworkStatus === NetworkStatus.fetchMore ||\n      // Polling uses a disposable Concast so the polling options (which force\n      // fetchPolicy to be \"network-only\" or \"no-cache\") won't override the original options.\n      newNetworkStatus === NetworkStatus.poll;\n\n    // Save the old variables, since Object.assign may modify them below.\n    const oldVariables = this.options.variables;\n    const oldFetchPolicy = this.options.fetchPolicy;\n\n    const mergedOptions = compact(this.options, newOptions || {});\n    const options = useDisposableConcast\n      // Disposable Concast fetches receive a shallow copy of this.options\n      // (merged with newOptions), leaving this.options unmodified.\n      ? mergedOptions\n      : assign(this.options, mergedOptions);\n\n    if (!useDisposableConcast) {\n      // We can skip calling updatePolling if we're not changing this.options.\n      this.updatePolling();\n\n      // Reset options.fetchPolicy to its original value when variables change,\n      // unless a new fetchPolicy was provided by newOptions.\n      if (\n        newOptions &&\n        newOptions.variables &&\n        !equal(newOptions.variables, oldVariables) &&\n        // Don't mess with the fetchPolicy if it's currently \"standby\".\n        options.fetchPolicy !== \"standby\" &&\n        // If we're changing the fetchPolicy anyway, don't try to change it here\n        // using applyNextFetchPolicy. The explicit options.fetchPolicy wins.\n        options.fetchPolicy === oldFetchPolicy\n      ) {\n        this.applyNextFetchPolicy(\"variables-changed\", options);\n        if (newNetworkStatus === void 0) {\n          newNetworkStatus = NetworkStatus.setVariables;\n        }\n      }\n    }\n\n    const variables = options.variables && { ...options.variables };\n    const concast = this.fetch(options, newNetworkStatus);\n    const observer: Observer<ApolloQueryResult<TData>> = {\n      next: result => {\n        this.reportResult(result, variables);\n      },\n      error: error => {\n        this.reportError(error, variables);\n      },\n    };\n\n    if (!useDisposableConcast) {\n      // We use the {add,remove}Observer methods directly to avoid wrapping\n      // observer with an unnecessary SubscriptionObserver object.\n      if (this.concast && this.observer) {\n        this.concast.removeObserver(this.observer);\n      }\n\n      this.concast = concast;\n      this.observer = observer;\n    }\n\n    concast.addObserver(observer);\n\n    return concast.promise;\n  }\n\n  // (Re)deliver the current result to this.observers without applying fetch\n  // policies or making network requests.\n  private observe() {\n    this.reportResult(\n      // Passing false is important so that this.getCurrentResult doesn't\n      // save the fetchMore result as this.lastResult, causing it to be\n      // ignored due to the this.isDifferentFromLastResult check in\n      // this.reportResult.\n      this.getCurrentResult(false),\n      this.variables,\n    );\n  }\n\n  private reportResult(\n    result: ApolloQueryResult<TData>,\n    variables: TVariables | undefined,\n  ) {\n    const lastError = this.getLastError();\n    if (lastError || this.isDifferentFromLastResult(result, variables)) {\n      if (lastError || !result.partial || this.options.returnPartialData) {\n        this.updateLastResult(result, variables);\n      }\n\n      iterateObserversSafely(this.observers, 'next', result);\n    }\n  }\n\n  private reportError(\n    error: ApolloError,\n    variables: TVariables | undefined,\n  ) {\n    // Since we don't get the current result on errors, only the error, we\n    // must mirror the updates that occur in QueryStore.markQueryError here\n    const errorResult = {\n      ...this.getLastResult(),\n      error,\n      errors: error.graphQLErrors,\n      networkStatus: NetworkStatus.error,\n      loading: false,\n    } as ApolloQueryResult<TData>;\n\n    this.updateLastResult(errorResult, variables);\n\n    iterateObserversSafely(this.observers, 'error', this.last!.error = error);\n  }\n\n  public hasObservers() {\n    return this.observers.size > 0;\n  }\n\n  private tearDownQuery() {\n    if (this.isTornDown) return;\n    if (this.concast && this.observer) {\n      this.concast.removeObserver(this.observer);\n      delete this.concast;\n      delete this.observer;\n    }\n\n    this.stopPolling();\n    // stop all active GraphQL subscriptions\n    this.subscriptions.forEach(sub => sub.unsubscribe());\n    this.subscriptions.clear();\n    this.queryManager.stopQuery(this.queryId);\n    this.observers.clear();\n    this.isTornDown = true;\n  }\n}\n\n// Necessary because the ObservableQuery constructor has a different\n// signature than the Observable constructor.\nfixObservableSubclass(ObservableQuery);\n\n// Reobserve with fetchPolicy effectively set to \"cache-first\", triggering\n// delivery of any new data from the cache, possibly falling back to the network\n// if any cache data are missing. This allows _complete_ cache results to be\n// delivered without also kicking off unnecessary network requests when\n// this.options.fetchPolicy is \"cache-and-network\" or \"network-only\". When\n// this.options.fetchPolicy is any other policy (\"cache-first\", \"cache-only\",\n// \"standby\", or \"no-cache\"), we call this.reobserve() as usual.\nexport function reobserveCacheFirst<TData, TVars>(\n  obsQuery: ObservableQuery<TData, TVars>,\n) {\n  const { fetchPolicy, nextFetchPolicy } = obsQuery.options;\n\n  if (\n    fetchPolicy === \"cache-and-network\" ||\n    fetchPolicy === \"network-only\"\n  ) {\n    return obsQuery.reobserve({\n      fetchPolicy: \"cache-first\",\n      // Use a temporary nextFetchPolicy function that replaces itself with the\n      // previous nextFetchPolicy value and returns the original fetchPolicy.\n      nextFetchPolicy(this: WatchQueryOptions<TVars, TData>) {\n        // Replace this nextFetchPolicy function in the options object with the\n        // original this.options.nextFetchPolicy value.\n        this.nextFetchPolicy = nextFetchPolicy;\n        // If the original nextFetchPolicy value was a function, give it a\n        // chance to decide what happens here.\n        if (typeof nextFetchPolicy === \"function\") {\n          return nextFetchPolicy.apply(this, arguments);\n        }\n        // Otherwise go back to the original this.options.fetchPolicy.\n        return fetchPolicy!;\n      },\n    });\n  }\n\n  return obsQuery.reobserve();\n}\n\nfunction defaultSubscriptionObserverErrorCallback(error: ApolloError) {\n  invariant.error('Unhandled error', error.message, error.stack);\n}\n\nexport function logMissingFieldErrors(\n  missing: MissingFieldError[] | MissingTree | undefined,\n) {\n  if (__DEV__ && missing) {\n    invariant.debug(`Missing cache result fields: ${\n      JSON.stringify(missing)\n    }`, missing);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}