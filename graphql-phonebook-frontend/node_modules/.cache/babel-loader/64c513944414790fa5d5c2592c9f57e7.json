{"ast":null,"code":"import { GraphQLError } from '../../error/GraphQLError.mjs';\n/**\n * No unused variables\n *\n * A GraphQL operation is only valid if all variables defined by an operation\n * are used, either directly or within a spread fragment.\n *\n * See https://spec.graphql.org/draft/#sec-All-Variables-Used\n */\n\nexport function NoUnusedVariablesRule(context) {\n  let variableDefs = [];\n  return {\n    OperationDefinition: {\n      enter() {\n        variableDefs = [];\n      },\n\n      leave(operation) {\n        const variableNameUsed = Object.create(null);\n        const usages = context.getRecursiveVariableUsages(operation);\n\n        for (const {\n          node\n        } of usages) {\n          variableNameUsed[node.name.value] = true;\n        }\n\n        for (const variableDef of variableDefs) {\n          const variableName = variableDef.variable.name.value;\n\n          if (variableNameUsed[variableName] !== true) {\n            context.reportError(new GraphQLError(operation.name ? `Variable \"$${variableName}\" is never used in operation \"${operation.name.value}\".` : `Variable \"$${variableName}\" is never used.`, {\n              nodes: variableDef\n            }));\n          }\n        }\n      }\n\n    },\n\n    VariableDefinition(def) {\n      variableDefs.push(def);\n    }\n\n  };\n}","map":{"version":3,"sources":["/Users/kulta/Code/part6/graphql-phonebook-frontend/node_modules/graphql/validation/rules/NoUnusedVariablesRule.mjs"],"names":["GraphQLError","NoUnusedVariablesRule","context","variableDefs","OperationDefinition","enter","leave","operation","variableNameUsed","Object","create","usages","getRecursiveVariableUsages","node","name","value","variableDef","variableName","variable","reportError","nodes","VariableDefinition","def","push"],"mappings":"AAAA,SAASA,YAAT,QAA6B,8BAA7B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,qBAAT,CAA+BC,OAA/B,EAAwC;AAC7C,MAAIC,YAAY,GAAG,EAAnB;AACA,SAAO;AACLC,IAAAA,mBAAmB,EAAE;AACnBC,MAAAA,KAAK,GAAG;AACNF,QAAAA,YAAY,GAAG,EAAf;AACD,OAHkB;;AAKnBG,MAAAA,KAAK,CAACC,SAAD,EAAY;AACf,cAAMC,gBAAgB,GAAGC,MAAM,CAACC,MAAP,CAAc,IAAd,CAAzB;AACA,cAAMC,MAAM,GAAGT,OAAO,CAACU,0BAAR,CAAmCL,SAAnC,CAAf;;AAEA,aAAK,MAAM;AAAEM,UAAAA;AAAF,SAAX,IAAuBF,MAAvB,EAA+B;AAC7BH,UAAAA,gBAAgB,CAACK,IAAI,CAACC,IAAL,CAAUC,KAAX,CAAhB,GAAoC,IAApC;AACD;;AAED,aAAK,MAAMC,WAAX,IAA0Bb,YAA1B,EAAwC;AACtC,gBAAMc,YAAY,GAAGD,WAAW,CAACE,QAAZ,CAAqBJ,IAArB,CAA0BC,KAA/C;;AAEA,cAAIP,gBAAgB,CAACS,YAAD,CAAhB,KAAmC,IAAvC,EAA6C;AAC3Cf,YAAAA,OAAO,CAACiB,WAAR,CACE,IAAInB,YAAJ,CACEO,SAAS,CAACO,IAAV,GACK,cAAaG,YAAa,iCAAgCV,SAAS,CAACO,IAAV,CAAeC,KAAM,IADpF,GAEK,cAAaE,YAAa,kBAHjC,EAIE;AACEG,cAAAA,KAAK,EAAEJ;AADT,aAJF,CADF;AAUD;AACF;AACF;;AA7BkB,KADhB;;AAiCLK,IAAAA,kBAAkB,CAACC,GAAD,EAAM;AACtBnB,MAAAA,YAAY,CAACoB,IAAb,CAAkBD,GAAlB;AACD;;AAnCI,GAAP;AAqCD","sourcesContent":["import { GraphQLError } from '../../error/GraphQLError.mjs';\n\n/**\n * No unused variables\n *\n * A GraphQL operation is only valid if all variables defined by an operation\n * are used, either directly or within a spread fragment.\n *\n * See https://spec.graphql.org/draft/#sec-All-Variables-Used\n */\nexport function NoUnusedVariablesRule(context) {\n  let variableDefs = [];\n  return {\n    OperationDefinition: {\n      enter() {\n        variableDefs = [];\n      },\n\n      leave(operation) {\n        const variableNameUsed = Object.create(null);\n        const usages = context.getRecursiveVariableUsages(operation);\n\n        for (const { node } of usages) {\n          variableNameUsed[node.name.value] = true;\n        }\n\n        for (const variableDef of variableDefs) {\n          const variableName = variableDef.variable.name.value;\n\n          if (variableNameUsed[variableName] !== true) {\n            context.reportError(\n              new GraphQLError(\n                operation.name\n                  ? `Variable \"$${variableName}\" is never used in operation \"${operation.name.value}\".`\n                  : `Variable \"$${variableName}\" is never used.`,\n                {\n                  nodes: variableDef,\n                },\n              ),\n            );\n          }\n        }\n      },\n    },\n\n    VariableDefinition(def) {\n      variableDefs.push(def);\n    },\n  };\n}\n"]},"metadata":{},"sourceType":"module"}