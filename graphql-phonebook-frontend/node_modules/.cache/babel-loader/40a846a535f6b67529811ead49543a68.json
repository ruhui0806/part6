{"ast":null,"code":"import { isAsyncIterableIterator, isBlob, isNodeResponse, isNodeReadableStream, isReadableStream, isStreamableBlob } from \"../../utilities/common/responseIterator.js\";\nimport asyncIterator from \"./iterators/async.js\";\nimport nodeStreamIterator from \"./iterators/nodeStream.js\";\nimport promiseIterator from \"./iterators/promise.js\";\nimport readerIterator from \"./iterators/reader.js\";\nexport function responseIterator(response) {\n  var body = response;\n  if (isNodeResponse(response)) body = response.body;\n  if (isAsyncIterableIterator(body)) return asyncIterator(body);\n  if (isReadableStream(body)) return readerIterator(body.getReader());\n\n  if (isStreamableBlob(body)) {\n    return readerIterator(body.stream().getReader());\n  }\n\n  if (isBlob(body)) return promiseIterator(body.arrayBuffer());\n  if (isNodeReadableStream(body)) return nodeStreamIterator(body);\n  throw new Error(\"Unknown body type for responseIterator. Please pass a streamable response.\");\n}","map":{"version":3,"mappings":"AAMA,SACEA,uBADF,EAEEC,MAFF,EAGEC,cAHF,EAIEC,oBAJF,EAKEC,gBALF,EAMEC,gBANF,QAOO,4CAPP;AASA,OAAOC,aAAP,MAA0B,sBAA1B;AACA,OAAOC,kBAAP,MAA+B,2BAA/B;AACA,OAAOC,eAAP,MAA4B,wBAA5B;AACA,OAAOC,cAAP,MAA2B,uBAA3B;AAEA,OAAM,SAAUC,gBAAV,CACJC,QADI,EAC6B;AAEjC,MAAIC,IAAI,GAAYD,QAApB;AAEA,MAAIT,cAAc,CAACS,QAAD,CAAlB,EAA8BC,IAAI,GAAGD,QAAQ,CAACC,IAAhB;AAE9B,MAAIZ,uBAAuB,CAACY,IAAD,CAA3B,EAAmC,OAAON,aAAa,CAAIM,IAAJ,CAApB;AAEnC,MAAIR,gBAAgB,CAACQ,IAAD,CAApB,EAA4B,OAAOH,cAAc,CAAIG,IAAI,CAACC,SAAL,EAAJ,CAArB;;AAI5B,MAAIR,gBAAgB,CAACO,IAAD,CAApB,EAA4B;AAC1B,WAAOH,cAAc,CAClBG,IAAI,CAACE,MAAL,GAA+CD,SAA/C,EADkB,CAArB;AAGD;;AAED,MAAIZ,MAAM,CAACW,IAAD,CAAV,EAAkB,OAAOJ,eAAe,CAAII,IAAI,CAACG,WAAL,EAAJ,CAAtB;AAElB,MAAIZ,oBAAoB,CAACS,IAAD,CAAxB,EAAgC,OAAOL,kBAAkB,CAAIK,IAAJ,CAAzB;AAEhC,QAAM,IAAII,KAAJ,CACJ,4EADI,CAAN;AAGD","names":["isAsyncIterableIterator","isBlob","isNodeResponse","isNodeReadableStream","isReadableStream","isStreamableBlob","asyncIterator","nodeStreamIterator","promiseIterator","readerIterator","responseIterator","response","body","getReader","stream","arrayBuffer","Error"],"sources":["/Users/kulta/Code/part6/graphql-phonebook-frontend/node_modules/@apollo/src/link/http/responseIterator.ts"],"sourcesContent":["/**\n * Original source:\n * https://github.com/kmalakoff/response-iterator/blob/master/src/index.ts\n */\n\nimport { Response as NodeResponse } from \"node-fetch\";\nimport {\n  isAsyncIterableIterator,\n  isBlob,\n  isNodeResponse,\n  isNodeReadableStream,\n  isReadableStream,\n  isStreamableBlob,\n} from \"../../utilities/common/responseIterator\";\n\nimport asyncIterator from \"./iterators/async\";\nimport nodeStreamIterator from \"./iterators/nodeStream\";\nimport promiseIterator from \"./iterators/promise\";\nimport readerIterator from \"./iterators/reader\";\n\nexport function responseIterator<T>(\n  response: Response | NodeResponse\n): AsyncIterableIterator<T> {\n  let body: unknown = response;\n\n  if (isNodeResponse(response)) body = response.body;\n\n  if (isAsyncIterableIterator(body)) return asyncIterator<T>(body);\n\n  if (isReadableStream(body)) return readerIterator<T>(body.getReader());\n\n  // this errors without casting to ReadableStream<T>\n  // because Blob.stream() returns a NodeJS ReadableStream\n  if (isStreamableBlob(body)) {\n    return readerIterator<T>(\n      (body.stream() as unknown as ReadableStream<T>).getReader()\n    );\n  }\n\n  if (isBlob(body)) return promiseIterator<T>(body.arrayBuffer());\n\n  if (isNodeReadableStream(body)) return nodeStreamIterator<T>(body);\n\n  throw new Error(\n    \"Unknown body type for responseIterator. Please pass a streamable response.\"\n  );\n}\n"]},"metadata":{},"sourceType":"module"}